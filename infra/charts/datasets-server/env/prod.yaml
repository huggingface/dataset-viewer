mongodb:
  enabled: false
  # we use the secret instead to get the mongo URL

storage:
  nfs:
    path: "/fsx"
    server: "svm-0adb40782285e2ec6.fs-0220b222fb471f3b9.fsx.us-east-1.amazonaws.com"
    # https://us-east-1.console.aws.amazon.com/fsx/home?region=us-east-1#file-system-details/fs-0220b222fb471f3b9
    # Alarm: https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#alarmsV2:alarm/Low+disk+on+datasets+server?

secrets:
  hfToken: hf-token
  mongoUrl: mongo-url

monitoring:
  enabled: true

domain: "datasets-server.huggingface.tech"

# Datasets blocklist
datasetsBlocklist: "bigscience/P3,echarlaix/gqa-lxmert,Graphcore/gqa-lxmert"

reverseProxy:
  replicas: 2

  ingress:
    annotations:
      alb.ingress.kubernetes.io/healthcheck-path: "/healthcheck"
      alb.ingress.kubernetes.io/listen-ports: "[{\"HTTP\": 80, \"HTTPS\": 443}]"
      alb.ingress.kubernetes.io/load-balancer-name: "hub-datasets-server-prod"
      alb.ingress.kubernetes.io/scheme: "internet-facing"
      alb.ingress.kubernetes.io/tags: "Env=prod,Project=datasets-server,Terraform=true"
      alb.ingress.kubernetes.io/target-node-labels: role-datasets-server=true
      kubernetes.io/ingress.class: "alb"

  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Env=prod,Project=datasets-server,Terraform=true
      service.beta.kubernetes.io/aws-load-balancer-name: hub-prod-datasets-server-nlb
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
      service.beta.kubernetes.io/aws-load-balancer-scheme: internal
      service.beta.kubernetes.io/aws-load-balancer-type: external
      service.beta.kubernetes.io/aws-load-balancer-target-node-labels: role-datasets-server=true

  nodeSelector:
    role-datasets-server: 'true'

  tolerations:
    - key: CriticalAddonsOnly
      operator: Equal

  resources:
    requests:
      cpu: 1
      memory: "256Mi"
    limits:
      cpu: 1
      memory: "256Mi"

api:
  replicas: 2

  nodeSelector:
    role-datasets-server: 'true'

  resources:
    requests:
      cpu: 1
      memory: "256Mi"
    limits:
      cpu: 1
      memory: "256Mi"

datasetsWorker:
  replicas: 3

  nodeSelector:
    role-datasets-server: 'true'

  resources:
    requests:
      cpu: 0.01
    limits:
      cpu: 1

splitsWorker:
  replicas: 12

  nodeSelector:
    role-datasets-server: 'true'

  resources:
    requests:
      cpu: 0.01
    limits:
      cpu: 1

  # Log level
  logLevel: "DEBUG"

admin:
  replicas: 1

  nodeSelector:
    role-datasets-server: 'true'

  resources:
    requests:
      cpu: 0.01
    limits:
      cpu: 1

  # Log level
  logLevel: "DEBUG"
