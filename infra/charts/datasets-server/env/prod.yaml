mongodb:
  enabled: false
  # we use the secret instead to get the mongo URL

storage:
  nfs:
    path: "/fsx"
    server: "svm-0adb40782285e2ec6.fs-0220b222fb471f3b9.fsx.us-east-1.amazonaws.com"
    # https://us-east-1.console.aws.amazon.com/fsx/home?region=us-east-1#file-system-details/fs-0220b222fb471f3b9
    # Alarm: https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#alarmsV2:alarm/Low+disk+on+datasets+server?

secrets:
  hfToken: hf-token
  mongoUrl: mongo-url

monitoring:
  enabled: true

domain: "datasets-server.huggingface.tech"

# Datasets blocklist
datasetsBlocklist: "bigscience/P3,echarlaix/gqa-lxmert,Graphcore/gqa-lxmert,Graphcore/vqa-lxmert,echarlaix/vqa-lxmert,LIUM/tedlium,Shitao/MSMARCOForLibVQ,imthanhlv/binhvq_news21_raw,abdusahmbzuai/masc_dev,MLCommons/peoples_speech,electricity_load_diagrams,svhn,the_pile,gary109/crop14_public-test,scielo,hyperpartisan_news_detection,wiki_auto,visual_genome,ms_marco"

reverseProxy:
  replicas: 2

  ingress:
    annotations:
      alb.ingress.kubernetes.io/healthcheck-path: "/healthcheck"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80, "HTTPS": 443}]'
      alb.ingress.kubernetes.io/load-balancer-name: "hub-datasets-server-prod"
      alb.ingress.kubernetes.io/scheme: "internet-facing"
      alb.ingress.kubernetes.io/tags: "Env=prod,Project=datasets-server,Terraform=true"
      alb.ingress.kubernetes.io/target-node-labels: role-datasets-server=true
      kubernetes.io/ingress.class: "alb"

  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Env=prod,Project=datasets-server,Terraform=true
      service.beta.kubernetes.io/aws-load-balancer-name: hub-prod-datasets-server-nlb
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
      service.beta.kubernetes.io/aws-load-balancer-scheme: internal
      service.beta.kubernetes.io/aws-load-balancer-type: external
      service.beta.kubernetes.io/aws-load-balancer-target-node-labels: role-datasets-server=true

  nodeSelector:
    role-datasets-server: "true"

  tolerations:
    - key: CriticalAddonsOnly
      operator: Equal

  resources:
    requests:
      cpu: 1
      memory: "256Mi"
    limits:
      cpu: 1
      memory: "256Mi"

api:
  replicas: 3

  nodeSelector:
    role-datasets-server: "true"

  resources:
    requests:
      cpu: 4
      memory: "2Gi"
    limits:
      cpu: 4
      memory: "2Gi"

  # Number of uvicorn workers for running the application
  # (2 x $num_cores) + 1
  # https://docs.gunicorn.org/en/stable/design.html#how-many-workers
  appNumWorkers: "9"

datasetsWorker:
  replicas: 2

  nodeSelector:
    role-datasets-server: "true"

  resources:
    requests:
      cpu: 0.01
    limits:
      cpu: 1
      memory: "4Gi"

splitsWorker:
  replicas: 4

  nodeSelector:
    role-datasets-server: "true"

  resources:
    requests:
      cpu: 0.01
    limits:
      cpu: 1
      memory: "4Gi"

  # Log level
  logLevel: "DEBUG"
  # Maximum number of jobs running at the same time for the same dataset
  maxJobsPerDataset: 2

admin:
  replicas: 1

  nodeSelector:
    role-datasets-server: "true"

  resources:
    requests:
      cpu: 0.01
    limits:
      cpu: 1

  # Log level
  logLevel: "DEBUG"
