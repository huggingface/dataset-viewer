{
  "openapi": "3.0.2",
  "info": {
    "title": "Datasets server API",
    "description": "The ðŸ¤— Datasets server API gives access to the contents, metadata and basic statistics of the Hugging Face Hub datasets.",
    "contact": {
      "name": "API Support",
      "email": "website@huggingface.co"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://datasets-server.huggingface.co",
      "description": "Production server"
    }
  ],
  "components": {
    "headers": {
      "Cache-Control": {
        "description": "Directives that control caching in browsers and shared caches. This directive is used internally for caching the responses: the API will serve the same response until the cache has expired.",
        "schema": { "type": "string" },
        "examples": {
          "no-cache": { "summary": "No cache.", "value": "no-cache" },
          "max-age": { "summary": "Cache TTL.", "value": "max-age=120" }
        },
        "required": true
      },
      "Access-Control-Allow-Origin": {
        "description": "Indicates whether the response can be shared with requesting code from the given origin.",
        "schema": { "type": "string" },
        "example": "*",
        "required": true
      },
      "X-Error-Code-splits-401": {
        "description": "A string that identifies the underlying error for 401 on /splits.",
        "schema": {
          "type": "string",
          "enum": ["ExternalUnauthenticatedError"]
        },
        "examples": {
          "ExternalUnauthenticatedError": {
            "summary": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication.",
            "value": "ExternalUnauthenticatedError"
          }
        },
        "required": true
      },
      "X-Error-Code-splits-404": {
        "description": "A string that identifies the underlying error for 404 on /splits.",
        "schema": {
          "type": "string",
          "enum": [
            "ExternalAuthenticatedError",
            "DatasetNotFoundError",
            "SplitsResponseNotFound"
          ]
        },
        "examples": {
          "ExternalAuthenticatedError": {
            "summary": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials.",
            "value": "ExternalAuthenticatedError"
          },
          "DatasetNotFoundError": {
            "summary": "The dataset does not exist on the Hub.",
            "value": "DatasetNotFoundError"
          },
          "SplitsResponseNotFound": {
            "summary": "Not found.",
            "value": "SplitsResponseNotFound"
          }
        },
        "required": true
      },
      "X-Error-Code-splits-422": {
        "description": "A string that identifies the underlying error for 422 on /splits.",
        "schema": {
          "type": "string",
          "enum": ["MissingRequiredParameter"]
        },
        "examples": {
          "MissingRequiredParameter": {
            "summary": "Parameter 'dataset' is required",
            "value": "MissingRequiredParameter"
          }
        },
        "required": true
      },
      "X-Error-Code-splits-500": {
        "description": "A string that identifies the underlying error for 500 on /splits.",
        "schema": {
          "type": "string",
          "enum": [
            "SplitsResponseNotReadyError",
            "SplitsNamesError",
            "UnexpectedError"
          ]
        },
        "examples": {
          "SplitsResponseNotReadyError": {
            "summary": "The server is busier than usual and the list of splits is not ready yet. Please retry later.",
            "value": "SplitsResponseNotReadyError"
          },
          "SplitsNamesError": {
            "summary": "Cannot get the split names for the dataset.",
            "value": "SplitsNamesError"
          },
          "UnexpectedError": {
            "summary": "Unexpected error.",
            "value": "UnexpectedError"
          }
        },
        "required": true
      },
      "X-Error-Code-first-rows-401": {
        "description": "A string that identifies the underlying error for 401 on /first-rows.",
        "schema": {
          "type": "string",
          "enum": ["ExternalUnauthenticatedError"]
        },
        "examples": {
          "ExternalUnauthenticatedError": {
            "summary": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication.",
            "value": "ExternalUnauthenticatedError"
          }
        },
        "required": true
      },
      "X-Error-Code-first-rows-404": {
        "description": "A string that identifies the underlying error for 404 on /first-rows.",
        "schema": {
          "type": "string",
          "enum": [
            "ExternalAuthenticatedError",
            "DatasetNotFoundError",
            "ConfigNotFoundError",
            "SplitNotFoundError",
            "FirstRowsResponseNotFound"
          ]
        },
        "examples": {
          "ExternalAuthenticatedError": {
            "summary": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials.",
            "value": "ExternalAuthenticatedError"
          },
          "DatasetNotFoundError": {
            "summary": "The dataset does not exist on the Hub.",
            "value": "DatasetNotFoundError"
          },
          "ConfigNotFoundError": {
            "summary": "config yyy does not exist for dataset xxx",
            "value": "ConfigNotFoundError"
          },
          "SplitNotFoundError": {
            "summary": "The config or the split does not exist in the dataset",
            "value": "SplitNotFoundError"
          },
          "FirstRowsResponseNotFound": {
            "summary": "Not found.",
            "value": "FirstRowsResponseNotFound"
          }
        },
        "required": true
      },
      "X-Error-Code-first-rows-422": {
        "description": "A string that identifies the underlying error for 422 on /first-rows.",
        "schema": {
          "type": "string",
          "enum": ["MissingRequiredParameter"]
        },
        "examples": {
          "MissingRequiredParameter": {
            "summary": "Parameters 'dataset', 'config' and 'split' are required",
            "value": "MissingRequiredParameter"
          }
        },
        "required": true
      },
      "X-Error-Code-first-rows-500": {
        "description": "A string that identifies the underlying error for 500 on /first-rows.",
        "schema": {
          "type": "string",
          "enum": [
            "FirstRowsResponseNotReady",
            "InfoError",
            "FeaturesError",
            "StreamingRowsError",
            "NormalRowsError",
            "RowsPostProcessingError",
            "UnexpectedError"
          ]
        },
        "examples": {
          "FirstRowsResponseNotReady": {
            "summary": "The list of the first rows is not ready yet. Please retry later.",
            "value": "FirstRowsResponseNotReady"
          },
          "InfoError": {
            "summary": "The info cannot be fetched for the config of the dataset.",
            "value": "InfoError"
          },
          "FeaturesError": {
            "summary": "Cannot extract the features (columns) for the split of the config of the dataset.",
            "value": "FeaturesError"
          },
          "StreamingRowsError": {
            "summary": "Cannot load the dataset split (in streaming mode) to extract the first rows.",
            "value": "StreamingRowsError"
          },
          "NormalRowsError": {
            "summary": "Cannot load the dataset split (in normal download mode) to extract the first rows.",
            "value": "NormalRowsError"
          },
          "RowsPostProcessingError": {
            "summary": "Server error while post-processing the split rows. Please report the issue.",
            "value": "RowsPostProcessingError"
          },
          "UnexpectedError": {
            "summary": "Unexpected error.",
            "value": "UnexpectedError"
          }
        },
        "required": true
      },
      "X-Error-Code-rows-401": {
        "description": "A string that identifies the underlying error for 401 on /rows.",
        "schema": {
          "type": "string",
          "enum": ["ExternalUnauthenticatedError"]
        },
        "examples": {
          "ExternalUnauthenticatedError": {
            "summary": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication.",
            "value": "ExternalUnauthenticatedError"
          }
        },
        "required": true
      },
      "X-Error-Code-rows-404": {
        "description": "A string that identifies the underlying error for 404 on /rows.",
        "schema": {
          "type": "string",
          "enum": [
            "ExternalAuthenticatedError",
            "DatasetNotFoundError",
            "ConfigNotFoundError",
            "SplitNotFoundError",
            "RowsResponseNotFound"
          ]
        },
        "examples": {
          "ExternalAuthenticatedError": {
            "summary": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials.",
            "value": "ExternalAuthenticatedError"
          },
          "DatasetNotFoundError": {
            "summary": "The dataset does not exist on the Hub.",
            "value": "DatasetNotFoundError"
          },
          "ConfigNotFoundError": {
            "summary": "config yyy does not exist for dataset xxx",
            "value": "ConfigNotFoundError"
          },
          "SplitNotFoundError": {
            "summary": "The config or the split does not exist in the dataset",
            "value": "SplitNotFoundError"
          },
          "RowsResponseNotFound": {
            "summary": "Not found.",
            "value": "RowsResponseNotFound"
          }
        },
        "required": true
      },
      "X-Error-Code-rows-422": {
        "description": "A string that identifies the underlying error for 422 on /rows.",
        "schema": {
          "type": "string",
          "enum": ["MissingRequiredParameter"]
        },
        "examples": {
          "MissingRequiredParameter": {
            "summary": "Parameters 'dataset', 'config', 'split', 'offset' and 'length' are required",
            "value": "MissingRequiredParameter"
          }
        },
        "required": true
      },
      "X-Error-Code-rows-500": {
        "description": "A string that identifies the underlying error for 500 on /first-rows.",
        "schema": {
          "type": "string",
          "enum": ["RowsPostProcessingError", "UnexpectedError"]
        },
        "examples": {
          "RowsPostProcessingError": {
            "summary": "Server error while post-processing the split rows. Please report the issue.",
            "value": "RowsPostProcessingError"
          },
          "UnexpectedError": {
            "summary": "Unexpected error.",
            "value": "UnexpectedError"
          }
        },
        "required": true
      },
      "X-Error-Code-valid-500": {
        "description": "A string that identifies the underlying error for 500 on /valid.",
        "schema": {
          "type": "string",
          "enum": ["UnexpectedError"]
        },
        "examples": {
          "UnexpectedError": {
            "summary": "Unexpected error.",
            "value": "UnexpectedError"
          }
        },
        "required": true
      },
      "X-Error-Code-is-valid-401": {
        "description": "A string that identifies the underlying error for 401 on /is-valid.",
        "schema": {
          "type": "string",
          "enum": ["ExternalUnauthenticatedError"]
        },
        "examples": {
          "ExternalUnauthenticatedError": {
            "summary": "Cannot access the route. Please retry with authentication.",
            "value": "ExternalUnauthenticatedError"
          }
        },
        "required": true
      },
      "X-Error-Code-is-valid-404": {
        "description": "A string that identifies the underlying error for 404 on /is-valid.",
        "schema": {
          "type": "string",
          "enum": ["ExternalAuthenticatedError"]
        },
        "examples": {
          "ExternalAuthenticatedError": {
            "summary": "Cannot access the route with the current credentials. Please retry with other authentication credentials.",
            "value": "ExternalAuthenticatedError"
          }
        },
        "required": true
      },
      "X-Error-Code-is-valid-422": {
        "description": "A string that identifies the underlying error for 422 on /is-valid.",
        "schema": {
          "type": "string",
          "enum": ["MissingRequiredParameter"]
        },
        "examples": {
          "MissingRequiredParameter": {
            "summary": "Parameter 'dataset' is required",
            "value": "MissingRequiredParameter"
          }
        },
        "required": true
      },
      "X-Error-Code-is-valid-500": {
        "description": "A string that identifies the underlying error for 500 on /is-valid.",
        "schema": {
          "type": "string",
          "enum": ["UnexpectedError"]
        },
        "examples": {
          "UnexpectedError": {
            "summary": "Unexpected error.",
            "value": "UnexpectedError"
          }
        },
        "required": true
      }
    },
    "schemas": {
      "ServerErrorResponse": {
        "type": "string",
        "example": "Internal Server Error"
      },
      "SplitsResponse": {
        "type": "object",
        "required": ["splits"],
        "properties": {
          "splits": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SplitItem" }
          }
        }
      },
      "SplitItem": {
        "type": "object",
        "required": ["dataset", "config", "split"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "split": {
            "type": "string"
          },
          "num_bytes": {
            "type": "integer"
          },
          "num_examples": {
            "type": "integer"
          }
        }
      },
      "CustomError": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "string"
          },
          "cause_exception": {
            "type": "string"
          },
          "cause_message": {
            "type": "string"
          },
          "cause_traceback": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FirstRowsResponse": {
        "type": "object",
        "required": ["dataset", "config", "split", "features", "rows"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "split": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeatureItem" }
          },
          "rows": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FirstRowItem" }
          }
        }
      },
      "RowsResponse": {
        "type": "object",
        "required": ["features", "rows"],
        "properties": {
          "features": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeatureItem" }
          },
          "rows": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FirstRowItem" }
          }
        }
      },
      "FeatureItem": {
        "type": "object",
        "required": ["feature_idx", "name", "type"],
        "properties": {
          "feature_idx": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/Feature"
          }
        }
      },
      "Feature": {
        "oneOf": [
          { "$ref": "#/components/schemas/ValueFeature" },
          { "$ref": "#/components/schemas/ClassLabelFeature" },
          { "$ref": "#/components/schemas/ArrayXDFeature" },
          { "$ref": "#/components/schemas/TranslationFeature" },
          {
            "$ref": "#/components/schemas/TranslationVariableLanguagesFeature"
          },
          {
            "$ref": "#/components/schemas/SequenceFeature"
          },
          {
            "$ref": "#/components/schemas/DictFeature"
          },
          {
            "$ref": "#/components/schemas/ListFeature"
          },
          {
            "$ref": "#/components/schemas/AudioFeature"
          },
          {
            "$ref": "#/components/schemas/ImageFeature"
          }
        ]
      },
      "ValueFeature": {
        "type": "object",
        "required": ["_type", "dtype"],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "enum": [null]
          },
          "_type": {
            "type": "string",
            "enum": ["Value"]
          },
          "dtype": {
            "type": "string",
            "enum": [
              "null",
              "bool",
              "int8",
              "int16",
              "int32",
              "int64",
              "uint8",
              "uint16",
              "uint32",
              "uint64",
              "float16",
              "float32 (alias float)",
              "float64 (alias double)",
              "time32[(s|ms)]",
              "time64[(us|ns)]",
              "timestamp[(s|ms|us|ns)]",
              "timestamp[(s|ms|us|ns), tz=(tzstring)]",
              "date32",
              "date64",
              "duration[(s|ms|us|ns)]",
              "decimal128(precision, scale)",
              "decimal256(precision, scale)",
              "binary",
              "large_binary",
              "string",
              "large_string"
            ]
          }
        }
      },
      "ClassLabelFeature": {
        "type": "object",
        "required": ["_type", "names"],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "enum": [null]
          },
          "_type": {
            "type": "string",
            "enum": ["ClassLabel"]
          },
          "num_classes": {
            "type": "integer"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ArrayXDFeature": {
        "type": "object",
        "required": ["_type", "shape"],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "enum": [null]
          },
          "_type": {
            "type": "string",
            "enum": ["Array2D", "Array3D", "Array4D", "Array5D"]
          },
          "shape": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            }
          }
        }
      },
      "TranslationFeature": {
        "type": "object",
        "required": ["_type", "languages"],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "enum": [null]
          },
          "_type": {
            "type": "string",
            "enum": ["Translation"]
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TranslationVariableLanguagesFeature": {
        "type": "object",
        "required": ["_type", "languages"],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "enum": [null]
          },
          "_type": {
            "type": "string",
            "enum": ["TranslationVariableLanguages"]
          },
          "num_languages": {
            "type": "integer"
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SequenceFeature": {
        "type": "object",
        "required": ["_type", "feature"],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "enum": [null]
          },
          "_type": {
            "type": "string",
            "enum": ["Sequence"]
          },
          "length": {
            "type": "integer"
          },
          "feature": {
            "$ref": "#/components/schemas/Feature"
          }
        }
      },
      "DictFeature": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Feature"
        }
      },
      "ListFeature": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Feature"
        }
      },
      "AudioFeature": {
        "type": "object",
        "required": ["_type", "sampling_rate"],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "enum": [null]
          },
          "_type": {
            "type": "string",
            "enum": ["Audio"]
          },
          "sampling_rate": {
            "type": "number"
          },
          "mono": {
            "type": "boolean"
          },
          "decode": {
            "type": "boolean"
          }
        }
      },
      "ImageFeature": {
        "type": "object",
        "required": ["_type"],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "enum": [null]
          },
          "_type": {
            "type": "string",
            "enum": ["Image"]
          },
          "decode": {
            "type": "boolean"
          }
        }
      },
      "FirstRowItem": {
        "type": "object",
        "required": ["row_idx", "row", "truncated_cells"],
        "properties": {
          "row_idx": {
            "type": "integer"
          },
          "row": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Cell"
            }
          },
          "truncated_cells": {
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "Cell": {
        "oneOf": [
          { "$ref": "#/components/schemas/ValueCell" },
          { "$ref": "#/components/schemas/ClassLabelCell" },
          { "$ref": "#/components/schemas/Array2DCell" },
          { "$ref": "#/components/schemas/Array3DCell" },
          { "$ref": "#/components/schemas/Array4DCell" },
          { "$ref": "#/components/schemas/Array5DCell" },
          { "$ref": "#/components/schemas/TranslationCell" },
          {
            "$ref": "#/components/schemas/TranslationVariableLanguagesCell"
          },
          {
            "$ref": "#/components/schemas/SequenceCell"
          },
          {
            "$ref": "#/components/schemas/DictCell"
          },
          {
            "$ref": "#/components/schemas/ListCell"
          },
          {
            "$ref": "#/components/schemas/AudioCell"
          },
          {
            "$ref": "#/components/schemas/ImageCell"
          }
        ]
      },
      "ValueCell": {
        "oneOf": [
          { "type": "boolean" },
          { "type": "integer" },
          { "type": "number" },
          { "type": "string" }
        ],
        "nullable": true
      },
      "ClassLabelCell": {
        "type": "integer"
      },
      "Array2DCell": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      },
      "Array3DCell": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Array2DCell"
        }
      },
      "Array4DCell": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Array3DCell"
        }
      },
      "Array5DCell": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Array4DCell"
        }
      },
      "TranslationCell": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "TranslationVariableLanguagesCell": {
        "type": "object",
        "required": ["language", "translation"],
        "properties": {
          "language": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "translation": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SequenceCell": {
        "oneOf": [
          { "$ref": "#/components/schemas/ListCell" },
          { "$ref": "#/components/schemas/DictionaryOfListsCell" }
        ]
      },
      "ListCell": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Cell"
        }
      },
      "DictionaryOfListsCell": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ListCell"
        }
      },
      "DictCell": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Cell"
        }
      },
      "AudioCell": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "src": {
              "type": "string",
              "format": "uri"
            },
            "type": {
              "type": "string",
              "enum": ["audio/wav", "audio/mpeg"]
            }
          }
        }
      },
      "ImageCell": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "src": {
              "type": "string",
              "format": "uri"
            },
            "height": {
              "type": "integer"
            },
            "width": {
              "type": "integer"
            }
          }
        }
      },
      "ValidResponse": {
        "type": "object",
        "required": ["preview", "viewer", "valid"],
        "properties": {
          "preview": {
            "type": "array",
            "items": { "type": "string" }
          },
          "viewer": {
            "type": "array",
            "items": { "type": "string" }
          },
          "valid": {
            "type": "array",
            "items": { "type": "string" },
            "deprecated": true
          }
        }
      },
      "IsValidResponse": {
        "type": "object",
        "required": ["valid"],
        "properties": {
          "valid": {
            "type": "boolean"
          }
        }
      },
      "ParquetFilesResponse": {
        "type": "object",
        "required": ["parquet_files"],
        "properties": {
          "parquet_files": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SplitHubFile" }
          }
        }
      },
      "SplitHubFile": {
        "type": "object",
        "required": ["dataset", "config", "split", "url", "filename", "size"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "split": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "filename": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        }
      }
    },
    "securitySchemes": {
      "HuggingFaceCookie": {
        "type": "apiKey",
        "description": "The HuggingFace cookie. Get it by logging in to https://huggingface.co/. It can only be used from the huggingface.co domain, and can thus only be used by Hub features like the [dataset viewer](https://huggingface.co/docs/hub/datasets-viewer), for example.",
        "name": "token",
        "in": "cookie"
      },
      "HuggingFaceToken": {
        "type": "http",
        "description": "The HuggingFace API token. Create a User Access Token with read access at https://huggingface.co/settings/tokens. You can also use an Organization API token. It gives access to the public datasets, and to the [gated datasets](https://huggingface.co/docs/hub/datasets-gated) for which you have accepted the conditions.",
        "scheme": "bearer",
        "bearerFormat": "A User Access Token is prefixed with `hf_`, while an Organization API token is prefixed with `api_org_`."
      }
    }
  },
  "paths": {
    "/splits": {
      "get": {
        "summary": "List of splits",
        "description": "The list of splits of a dataset.",
        "externalDocs": {
          "description": "See Splits (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/splits"
        },
        "operationId": "listSplits",
        "security": [
          {},
          {
            "HuggingFaceCookie": []
          },
          {
            "HuggingFaceToken": []
          }
        ],
        "parameters": [
          {
            "name": "dataset",
            "in": "query",
            "description": "The identifier of the dataset on the Hub.",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "glue": { "summary": "a canonical dataset", "value": "glue" },
              "Helsinki-NLP/tatoeba_mt": {
                "summary": "a namespaced dataset",
                "value": "Helsinki-NLP/tatoeba_mt"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of splits.</br>Beware: the response is not paginated.",
            "headers": {
              "Cache-Control": { "$ref": "#/components/headers/Cache-Control" },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitsResponse"
                },
                "examples": {
                  "duorc": {
                    "summary": "duorc: two configs, six splits",
                    "value": {
                      "splits": [
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "train",
                          "num_bytes": 239852925,
                          "num_examples": 60721
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "validation",
                          "num_bytes": 51662575,
                          "num_examples": 12961
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "test",
                          "num_bytes": 49142766,
                          "num_examples": 12559
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "train",
                          "num_bytes": 496683105,
                          "num_examples": 69524
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "validation",
                          "num_bytes": 106510545,
                          "num_examples": 15591
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "test",
                          "num_bytes": 115215816,
                          "num_examples": 15857
                        }
                      ]
                    }
                  },
                  "emotion": {
                    "summary": "emotion: one config, three splits",
                    "value": {
                      "splits": [
                        {
                          "dataset": "emotion",
                          "config": "default",
                          "split": "train",
                          "num_bytes": 1741541,
                          "num_examples": 16000
                        },
                        {
                          "dataset": "emotion",
                          "config": "default",
                          "split": "validation",
                          "num_bytes": 214699,
                          "num_examples": 2000
                        },
                        {
                          "dataset": "emotion",
                          "config": "default",
                          "split": "test",
                          "num_bytes": 217177,
                          "num_examples": 2000
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the external authentication step on the Hugging Face Hub failed, and no authentication mechanism has been provided. Retry with authentication.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-splits-401"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is gated.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the repository to download from cannot be found. This may be because it doesn't exist, or because it is set to `private` and you do not have access.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-splits-404"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "The `dataset` parameter has not been provided.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-splits-422"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "missing-parameter": {
                    "summary": "The dataset parameter is missing.",
                    "value": { "error": "Parameter 'dataset' is required" }
                  },
                  "empty-parameter": {
                    "summary": "The dataset parameter is empty (?dataset=).",
                    "value": { "error": "Parameter 'dataset' is required" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-splits-500"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "SplitsNotFoundError": {
                    "summary": "SplitsNotFoundError",
                    "value": {
                      "error": "Cannot get the split names for the dataset.",
                      "cause_exception": "SplitsNotFoundError",
                      "cause_message": "The split names could not be parsed from the dataset config.",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/inspect.py\", line 354, in get_dataset_config_info\n    for split_generator in builder._split_generators(\n",
                        "TypeError: _split_generators() missing 1 required positional argument: 'pipeline'\n",
                        "\nThe above exception was the direct cause of the following exception:\n\n",
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/responses/splits.py\", line 74, in get_splits_response\n    split_full_names = get_dataset_split_full_names(dataset, hf_token)\n",
                        "  File \"/src/services/worker/src/worker/responses/splits.py\", line 35, in get_dataset_split_full_names\n    return [\n",
                        "  File \"/src/services/worker/src/worker/responses/splits.py\", line 38, in <listcomp>\n    for split in get_dataset_split_names(dataset, config, use_auth_token=hf_token)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/inspect.py\", line 404, in get_dataset_split_names\n    info = get_dataset_config_info(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/inspect.py\", line 359, in get_dataset_config_info\n    raise SplitsNotFoundError(\"The split names could not be parsed from the dataset config.\") from err\n",
                        "datasets.inspect.SplitsNotFoundError: The split names could not be parsed from the dataset config.\n"
                      ]
                    }
                  },
                  "FileNotFoundError": {
                    "summary": "FileNotFoundError",
                    "value": {
                      "error": "Cannot get the split names for the dataset.",
                      "cause_exception": "FileNotFoundError",
                      "cause_message": "Couldn't find a dataset script at /src/services/worker/akhaliq/test/test.py or any data file in the same directory. Couldn't find 'akhaliq/test' on the Hugging Face Hub either: FileNotFoundError: The dataset repository at 'akhaliq/test' doesn't contain any data file.",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/responses/splits.py\", line 74, in get_splits_response\n    split_full_names = get_dataset_split_full_names(dataset, hf_token)\n",
                        "  File \"/src/services/worker/src/worker/responses/splits.py\", line 37, in get_dataset_split_full_names\n    for config in get_dataset_config_names(dataset, use_auth_token=hf_token)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/inspect.py\", line 289, in get_dataset_config_names\n    dataset_module = dataset_module_factory(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/load.py\", line 1243, in dataset_module_factory\n    raise FileNotFoundError(\n",
                        "FileNotFoundError: Couldn't find a dataset script at /src/services/worker/akhaliq/test/test.py or any data file in the same directory. Couldn't find 'akhaliq/test' on the Hugging Face Hub either: FileNotFoundError: The dataset repository at 'akhaliq/test' doesn't contain any data file.\n"
                      ]
                    }
                  },
                  "not-ready": {
                    "summary": "the response is not ready yet.",
                    "value": {
                      "error": "The server is busier than usual and the list of splits is not ready yet. Please retry later."
                    }
                  },
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Unexpected error."
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/first-rows": {
      "get": {
        "summary": "First rows of a split",
        "description": "The list of the 100 first rows of a dataset split.",
        "externalDocs": {
          "description": "See First rows (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/first-rows"
        },
        "operationId": "listFirstRows",
        "security": [
          {},
          {
            "HuggingFaceCookie": []
          },
          {
            "HuggingFaceToken": []
          }
        ],
        "parameters": [
          {
            "name": "dataset",
            "in": "query",
            "description": "The identifier of the dataset on the Hub.",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "glue": { "summary": "a canonical dataset", "value": "glue" },
              "Helsinki-NLP/tatoeba_mt": {
                "summary": "a namespaced dataset",
                "value": "Helsinki-NLP/tatoeba_mt"
              }
            }
          },
          {
            "name": "config",
            "in": "query",
            "description": "The dataset configuration (or subset).",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "cola": {
                "summary": "a subset of the glue dataset",
                "value": "cola"
              },
              "yangdong/ecqa": {
                "summary": "the default configuration given by the ðŸ¤— Datasets library",
                "value": "yangdong--ecqa"
              }
            }
          },
          {
            "name": "split",
            "in": "query",
            "description": "The split name.",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "train": {
                "summary": "train split",
                "value": "train"
              },
              "test": {
                "summary": "test split",
                "value": "test"
              },
              "validation": {
                "summary": "validation split",
                "value": "validation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The <a href='https://huggingface.co/docs/datasets/about_dataset_features'>features</a>, and the 100 first rows of the split.</br>Note: the response can be truncated (less rows, or truncated cell contents): see examples.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirstRowsResponse"
                },
                "examples": {
                  "imdb": {
                    "summary": "text, and label column (only 3 rows are shown for brevity)",
                    "value": {
                      "dataset": "imdb",
                      "config": "plain_text",
                      "split": "train",
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "text",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "label",
                          "type": {
                            "num_classes": 2,
                            "names": ["neg", "pos"],
                            "_type": "ClassLabel"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "text": "I rented I AM CURIOUS-YELLOW from my video store because of all the controversy that surrounded it when it was first released in 1967. I also heard that at first it was seized by U.S. customs if it ever tried to enter this country, therefore being a fan of films considered \"controversial\" I really had to see this for myself.<br /><br />The plot is centered around a young Swedish drama student named Lena who wants to learn everything she can about life. In particular she wants to focus her attentions to making some sort of documentary on what the average Swede thought about certain political issues such as the Vietnam War and race issues in the United States. In between asking politicians and ordinary denizens of Stockholm about their opinions on politics, she has sex with her drama teacher, classmates, and married men.<br /><br />What kills me about I AM CURIOUS-YELLOW is that 40 years ago, this was considered pornographic. Really, the sex and nudity scenes are few and far between, even then it's not shot like some cheaply made porno. While my countrymen mind find it shocking, in reality sex and nudity are a major staple in Swedish cinema. Even Ingmar Bergman, arguably their answer to good old boy John Ford, had sex scenes in his films.<br /><br />I do commend the filmmakers for the fact that any sex shown in the film is shown for artistic purposes rather than just to shock people and make money to be shown in pornographic theaters in America. I AM CURIOUS-YELLOW is a good film for anyone wanting to study the meat and potatoes (no pun intended) of Swedish cinema. But really, this film doesn't have much of a plot.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "text": "\"I Am Curious: Yellow\" is a risible and pretentious steaming pile. It doesn't matter what one's political views are because this film can hardly be taken seriously on any level. As for the claim that frontal male nudity is an automatic NC-17, that isn't true. I've seen R-rated films with male nudity. Granted, they only offer some fleeting views, but where are the R-rated films with gaping vulvas and flapping labia? Nowhere, because they don't exist. The same goes for those crappy cable shows: schlongs swinging in the breeze but not a clitoris in sight. And those pretentious indie movies like The Brown Bunny, in which we're treated to the site of Vincent Gallo's throbbing johnson, but not a trace of pink visible on Chloe Sevigny. Before crying (or implying) \"double-standard\" in matters of nudity, the mentally obtuse should take into account one unavoidably obvious anatomical difference between men and women: there are no genitals on display when actresses appears nude, and the same cannot be said for a man. In fact, you generally won't see female genitals in an American film in anything short of porn or explicit erotica. This alleged double-standard is less a double standard than an admittedly depressing ability to come to terms culturally with the insides of women's bodies.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "text": "If only to avoid making this type of film in the future. This film is interesting as an experiment but tells no cogent story.<br /><br />One might feel virtuous for sitting thru it because it touches on so many IMPORTANT issues but it does so without any discernable motive. The viewer comes away with no new perspectives (unless one comes up with one while one's mind wanders, as it will invariably do during this pointless film).<br /><br />One might better spend one's time staring out a window at a tree growing.<br /><br />",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 3,
                          "row": {
                            "text": "This film was probably inspired by Godard's Masculin, fÃ©minin and I urge you to see that film instead.<br /><br />The film has two strong elements and those are, (1) the realistic acting (2) the impressive, undeservedly good, photo. Apart from that, what strikes me most is the endless stream of silliness. Lena Nyman has to be most annoying actress in the world. She acts so stupid and with all the nudity in this film,...it's unattractive. Comparing to Godard's film, intellectuality has been replaced with stupidity. Without going too far on this subject, I would say that follows from the difference in ideals between the French and the Swedish society.<br /><br />A movie of its time, and place. 2/10.",
                            "label": 0
                          },
                          "truncated_cells": []
                        }
                      ]
                    }
                  },
                  "truncated": {
                    "summary": "truncated cells due to the response size (has a timestamp column)",
                    "value": {
                      "dataset": "ett",
                      "config": "m2",
                      "split": "test",
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "start",
                          "type": {
                            "dtype": "timestamp[s]",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "target",
                          "type": {
                            "feature": {
                              "dtype": "float32",
                              "_type": "Value"
                            },
                            "_type": "Sequence"
                          }
                        },
                        {
                          "feature_idx": 2,
                          "name": "feat_static_cat",
                          "type": {
                            "feature": {
                              "dtype": "uint64",
                              "_type": "Value"
                            },
                            "_type": "Sequence"
                          }
                        },
                        {
                          "feature_idx": 3,
                          "name": "feat_dynamic_real",
                          "type": {
                            "feature": {
                              "feature": {
                                "dtype": "float32",
                                "_type": "Value"
                              },
                              "_type": "Sequence"
                            },
                            "_type": "Sequence"
                          }
                        },
                        {
                          "feature_idx": 4,
                          "name": "item_id",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 3,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        }
                      ]
                    }
                  },
                  "image": {
                    "summary": "a column with images (only 3 rows are shown for brevity)",
                    "value": {
                      "dataset": "huggan/horse2zebra",
                      "config": "huggan--horse2zebra-aligned",
                      "split": "train",
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "imageA",
                          "type": {
                            "_type": "Image"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "imageB",
                          "type": {
                            "_type": "Image"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "imageA": {
                              "url": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/0/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "url": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/0/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "imageA": {
                              "url": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/1/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "url": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/1/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "imageA": {
                              "url": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/2/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "url": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/2/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 3,
                          "row": {
                            "imageA": {
                              "url": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/3/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "url": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/3/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        }
                      ]
                    }
                  },
                  "audio": {
                    "summary": "a column with audio files (only 3 rows are shown for brevity)",
                    "value": {
                      "dataset": "mozilla-foundation/common_voice_9_0",
                      "config": "en",
                      "split": "train",
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "client_id",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "path",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 2,
                          "name": "audio",
                          "type": {
                            "sampling_rate": 48000,
                            "_type": "Audio"
                          }
                        },
                        {
                          "feature_idx": 3,
                          "name": "sentence",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 4,
                          "name": "up_votes",
                          "type": {
                            "dtype": "int64",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 5,
                          "name": "down_votes",
                          "type": {
                            "dtype": "int64",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 6,
                          "name": "age",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 7,
                          "name": "gender",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 8,
                          "name": "accent",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 9,
                          "name": "locale",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 10,
                          "name": "segment",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "client_id": "04960d53cc851eeb6d93f21a09e09ab36fe16943acb226ced1211d7250ab2f1b9a1d655c1cc03d50006e396010851ad52d4c53f49dd77b080b01c4230704c68d",
                            "path": null,
                            "audio": [
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/assets/mozilla-foundation/common_voice_9_0/--/en/train/0/audio/audio.mp3",
                                "type": "audio/mpeg"
                              },
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/assets/mozilla-foundation/common_voice_9_0/--/en/train/0/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "sentence": "Why does Melissandre look like she wants to consume Jon Snow on the ride up the wall?",
                            "up_votes": 2,
                            "down_votes": 0,
                            "age": "fourties",
                            "gender": "male",
                            "accent": "United States English",
                            "locale": "en",
                            "segment": ""
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "client_id": "f9f1f96bae1390dfe61ff298abb90975c079e913c712d57d97307ed797469eac446abb149daaad24cacffcc24e1e3275fefeb97f977eb74ce2233e0e5c1d437e",
                            "path": null,
                            "audio": [
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/assets/mozilla-foundation/common_voice_9_0/--/en/train/1/audio/audio.mp3",
                                "type": "audio/mpeg"
                              },
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/assets/mozilla-foundation/common_voice_9_0/--/en/train/1/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "sentence": "\"I'm getting them for twelve dollars a night.\"",
                            "up_votes": 2,
                            "down_votes": 0,
                            "age": "",
                            "gender": "",
                            "accent": "",
                            "locale": "en",
                            "segment": ""
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "client_id": "a6c7706a220eeea7ee3687c1122fe7ac17962d2449d25b6db37cc41cdaace442683e11945b6f581e73941c3083cd4eecfafc938840459cd8c571dae7774ee687",
                            "path": null,
                            "audio": [
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/assets/mozilla-foundation/common_voice_9_0/--/en/train/2/audio/audio.mp3",
                                "type": "audio/mpeg"
                              },
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/assets/mozilla-foundation/common_voice_9_0/--/en/train/2/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "sentence": "Tower of strength",
                            "up_votes": 2,
                            "down_votes": 0,
                            "age": "",
                            "gender": "",
                            "accent": "",
                            "locale": "en",
                            "segment": ""
                          },
                          "truncated_cells": []
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the external authentication step on the Hugging Face Hub failed, and no authentication mechanism has been provided. Retry with authentication.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-first-rows-401"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is gated.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the repository to download from cannot be found, or if the config or split does not exist in the dataset. Note that this may be because the dataset doesn't exist, or because it is set to `private` and you do not have access.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-first-rows-404"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "inexistent-config": {
                    "summary": "The config does not exist in the dataset.",
                    "value": { "error": "Not found." }
                  },
                  "inexistent-split": {
                    "summary": "The soplit does not exist in the dataset.",
                    "value": { "error": "Not found." }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Some of the `dataset`, `config`, or `split` parameters have not been provided or are invalid.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-first-rows-422"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "missing-dataset": {
                    "summary": "The dataset parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "missing-config": {
                    "summary": "The config parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "missing-split": {
                    "summary": "The split parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-dataset": {
                    "summary": "The dataset parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-config": {
                    "summary": "The config parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-split": {
                    "summary": "The split parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-first-rows-500"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "NonMatchingCheckError": {
                    "summary": "NonMatchingCheckError",
                    "value": {
                      "error": "Cannot load the dataset split (in normal download mode) to extract the first rows.",
                      "cause_exception": "NonMatchingChecksumError",
                      "cause_message": "Checksums didn't match for dataset source files:\n['https://gitlab.com/bigirqu/ArCOV-19/-/archive/master/ArCOV-19-master.zip']",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/responses/first_rows.py\", line 345, in get_first_rows_response\n    rows = get_rows(\n",
                        "  File \"/src/services/worker/src/worker/utils.py\", line 123, in decorator\n    return func(*args, **kwargs)\n",
                        "  File \"/src/services/worker/src/worker/responses/first_rows.py\", line 80, in get_rows\n    rows_plus_one = list(itertools.islice(dataset, rows_max_number + 1))\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/iterable_dataset.py\", line 718, in __iter__\n    for key, example in self._iter():\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/iterable_dataset.py\", line 708, in _iter\n    yield from ex_iterable\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/iterable_dataset.py\", line 112, in __iter__\n    yield from self.generate_examples_fn(**self.kwargs)\n",
                        "  File \"/root/.cache/huggingface/modules/datasets_modules/datasets/ar_cov19/818d9b774f4b70542b6807e6ddb6db32c916aafeba4fbdcd228ec79d21edaeab/ar_cov19.py\", line 131, in _generate_examples\n    for fname in sorted(glob.glob(os.path.join(data_dir, \"ArCOV-19-master/dataset/all_tweets/2020-*\"))):\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/streaming.py\", line 67, in wrapper\n    return function(*args, use_auth_token=use_auth_token, **kwargs)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/streaming_download_manager.py\", line 522, in xglob\n    fs, *_ = fsspec.get_fs_token_paths(urlpath, storage_options=storage_options)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/core.py\", line 632, in get_fs_token_paths\n    fs = filesystem(protocol, **inkwargs)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/registry.py\", line 262, in filesystem\n    return cls(**storage_options)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/spec.py\", line 76, in __call__\n    obj = super().__call__(*args, **kwargs)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/zip.py\", line 58, in __init__\n    self.zip = zipfile.ZipFile(self.fo)\n",
                        "  File \"/usr/local/lib/python3.9/zipfile.py\", line 1257, in __init__\n    self._RealGetContents()\n",
                        "  File \"/usr/local/lib/python3.9/zipfile.py\", line 1320, in _RealGetContents\n    endrec = _EndRecData(fp)\n",
                        "  File \"/usr/local/lib/python3.9/zipfile.py\", line 263, in _EndRecData\n    fpin.seek(0, 2)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 684, in seek\n    raise ValueError(\"Cannot seek streaming HTTP file\")\n",
                        "ValueError: Cannot seek streaming HTTP file\n",
                        "\nDuring handling of the above exception, another exception occurred:\n\n",
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/responses/first_rows.py\", line 355, in get_first_rows_response\n    rows = get_rows(\n",
                        "  File \"/src/services/worker/src/worker/utils.py\", line 123, in decorator\n    return func(*args, **kwargs)\n",
                        "  File \"/src/services/worker/src/worker/responses/first_rows.py\", line 68, in get_rows\n    dataset = load_dataset(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/load.py\", line 1746, in load_dataset\n    builder_instance.download_and_prepare(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/builder.py\", line 704, in download_and_prepare\n    self._download_and_prepare(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/builder.py\", line 1227, in _download_and_prepare\n    super()._download_and_prepare(dl_manager, verify_infos, check_duplicate_keys=verify_infos)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/builder.py\", line 775, in _download_and_prepare\n    verify_checksums(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/utils/info_utils.py\", line 40, in verify_checksums\n    raise NonMatchingChecksumError(error_msg + str(bad_urls))\n",
                        "datasets.utils.info_utils.NonMatchingChecksumError: Checksums didn't match for dataset source files:\n['https://gitlab.com/bigirqu/ArCOV-19/-/archive/master/ArCOV-19-master.zip']\n"
                      ]
                    }
                  },
                  "FileNotFoundError": {
                    "summary": "FileNotFoundError",
                    "value": {
                      "error": "Cannot load the dataset split (in normal download mode) to extract the first rows.",
                      "cause_exception": "FileNotFoundError",
                      "cause_message": "Couldn't find file at https://homes.cs.washington.edu/~msap/atomic/data/atomic_data.tgz",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 391, in _info\n    await _file_info(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 772, in _file_info\n    r.raise_for_status()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/aiohttp/client_reqrep.py\", line 1004, in raise_for_status\n    raise ClientResponseError(\n",
                        "aiohttp.client_exceptions.ClientResponseError: 404, message='Not Found', url=URL('https://homes.cs.washington.edu/~msap/atomic/data/atomic_data.tgz')\n",
                        "\nThe above exception was the direct cause of the following exception:\n\n",
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/responses/first_rows.py\", line 345, in get_first_rows_response\n    rows = get_rows(\n",
                        "  File \"/src/services/worker/src/worker/utils.py\", line 123, in decorator\n    return func(*args, **kwargs)\n",
                        "  File \"/src/services/worker/src/worker/responses/first_rows.py\", line 80, in get_rows\n    rows_plus_one = list(itertools.islice(dataset, rows_max_number + 1))\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/iterable_dataset.py\", line 718, in __iter__\n    for key, example in self._iter():\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/iterable_dataset.py\", line 708, in _iter\n    yield from ex_iterable\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/iterable_dataset.py\", line 112, in __iter__\n    yield from self.generate_examples_fn(**self.kwargs)\n",
                        "  File \"/root/.cache/huggingface/modules/datasets_modules/datasets/atomic/c0f0ec7d10713c41dfc87f0cf17f936b122d22e19216051217c99134d38f6d7b/atomic.py\", line 123, in _generate_examples\n    for path, f in files:\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/streaming_download_manager.py\", line 760, in __iter__\n    yield from self.generator(*self.args, **self.kwargs)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/streaming_download_manager.py\", line 787, in _iter_from_urlpath\n    with xopen(urlpath, \"rb\", use_auth_token=use_auth_token) as f:\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/streaming_download_manager.py\", line 453, in xopen\n    file_obj = fsspec.open(file, mode=mode, *args, **kwargs).open()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/core.py\", line 141, in open\n    out = self.__enter__()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/core.py\", line 104, in __enter__\n    f = self.fs.open(self.path, mode=mode)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/spec.py\", line 1037, in open\n    f = self._open(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 340, in _open\n    size = size or self.info(path, **kwargs)[\"size\"]\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/asyn.py\", line 86, in wrapper\n    return sync(self.loop, func, *args, **kwargs)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/asyn.py\", line 66, in sync\n    raise return_result\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/asyn.py\", line 26, in _runner\n    result[0] = await coro\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 404, in _info\n    raise FileNotFoundError(url) from exc\n",
                        "FileNotFoundError: https://homes.cs.washington.edu/~msap/atomic/data/atomic_data.tgz\n",
                        "\nDuring handling of the above exception, another exception occurred:\n\n",
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/responses/first_rows.py\", line 355, in get_first_rows_response\n    rows = get_rows(\n",
                        "  File \"/src/services/worker/src/worker/utils.py\", line 123, in decorator\n    return func(*args, **kwargs)\n",
                        "  File \"/src/services/worker/src/worker/responses/first_rows.py\", line 68, in get_rows\n    dataset = load_dataset(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/load.py\", line 1746, in load_dataset\n    builder_instance.download_and_prepare(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/builder.py\", line 704, in download_and_prepare\n    self._download_and_prepare(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/builder.py\", line 1227, in _download_and_prepare\n    super()._download_and_prepare(dl_manager, verify_infos, check_duplicate_keys=verify_infos)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/builder.py\", line 771, in _download_and_prepare\n    split_generators = self._split_generators(dl_manager, **split_generators_kwargs)\n",
                        "  File \"/root/.cache/huggingface/modules/datasets_modules/datasets/atomic/c0f0ec7d10713c41dfc87f0cf17f936b122d22e19216051217c99134d38f6d7b/atomic.py\", line 95, in _split_generators\n    archive = dl_manager.download(my_urls)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/download_manager.py\", line 309, in download\n    downloaded_path_or_paths = map_nested(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/utils/py_utils.py\", line 385, in map_nested\n    return function(data_struct)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/download_manager.py\", line 335, in _download\n    return cached_path(url_or_filename, download_config=download_config)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/utils/file_utils.py\", line 185, in cached_path\n    output_path = get_from_cache(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/utils/file_utils.py\", line 530, in get_from_cache\n    raise FileNotFoundError(f\"Couldn't find file at {url}\")\n",
                        "FileNotFoundError: Couldn't find file at https://homes.cs.washington.edu/~msap/atomic/data/atomic_data.tgz\n"
                      ]
                    }
                  },
                  "not-ready": {
                    "summary": "the response is not ready yet.",
                    "value": {
                      "error": "The list of the first rows is not ready yet. Please retry later."
                    }
                  },
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Unexpected error."
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rows": {
      "get": {
        "summary": "A slice of rows of a split",
        "description": "The list of rows of a dataset split at a given slice location (offset).",
        "externalDocs": {
          "description": "See rows (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/rows"
        },
        "operationId": "listRows",
        "security": [
          {},
          {
            "HuggingFaceCookie": []
          },
          {
            "HuggingFaceToken": []
          }
        ],
        "parameters": [
          {
            "name": "dataset",
            "in": "query",
            "description": "The identifier of the dataset on the Hub.",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "glue": { "summary": "a canonical dataset", "value": "glue" },
              "Helsinki-NLP/tatoeba_mt": {
                "summary": "a namespaced dataset",
                "value": "Helsinki-NLP/tatoeba_mt"
              }
            }
          },
          {
            "name": "config",
            "in": "query",
            "description": "The dataset configuration (or subset).",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "cola": {
                "summary": "a subset of the glue dataset",
                "value": "cola"
              },
              "yangdong/ecqa": {
                "summary": "the default configuration given by the ðŸ¤— Datasets library",
                "value": "yangdong--ecqa"
              }
            }
          },
          {
            "name": "split",
            "in": "query",
            "description": "The split name.",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "train": {
                "summary": "train split",
                "value": "train"
              },
              "test": {
                "summary": "test split",
                "value": "test"
              },
              "validation": {
                "summary": "validation split",
                "value": "validation"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the slice.",
            "default": 0,
            "minimum": 0,
            "schema": { "type": "integer" },
            "examples": {
              "0": {
                "summary": "from the beginning",
                "value": 0
              },
              "100": {
                "summary": "from the row at index 100",
                "value": 100
              }
            }
          },
          {
            "name": "length",
            "in": "query",
            "description": "The length of the slice",
            "default": 100,
            "minimum": 0,
            "maximum": 100,
            "schema": { "type": "integer" },
            "examples": {
              "100": {
                "summary": "a slice of 100 rows",
                "value": 100
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The <a href='https://huggingface.co/docs/datasets/about_dataset_features'>features</a>, and the list of rows of the requested slice.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowsResponse"
                },
                "examples": {
                  "imdb": {
                    "summary": "text, and label column (only 4 rows are shown for brevity)",
                    "value": {
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "text",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "label",
                          "type": {
                            "num_classes": 2,
                            "names": ["neg", "pos"],
                            "_type": "ClassLabel"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "text": "I rented I AM CURIOUS-YELLOW from my video store because of all the controversy that surrounded it when it was first released in 1967. I also heard that at first it was seized by U.S. customs if it ever tried to enter this country, therefore being a fan of films considered \"controversial\" I really had to see this for myself.<br /><br />The plot is centered around a young Swedish drama student named Lena who wants to learn everything she can about life. In particular she wants to focus her attentions to making some sort of documentary on what the average Swede thought about certain political issues such as the Vietnam War and race issues in the United States. In between asking politicians and ordinary denizens of Stockholm about their opinions on politics, she has sex with her drama teacher, classmates, and married men.<br /><br />What kills me about I AM CURIOUS-YELLOW is that 40 years ago, this was considered pornographic. Really, the sex and nudity scenes are few and far between, even then it's not shot like some cheaply made porno. While my countrymen mind find it shocking, in reality sex and nudity are a major staple in Swedish cinema. Even Ingmar Bergman, arguably their answer to good old boy John Ford, had sex scenes in his films.<br /><br />I do commend the filmmakers for the fact that any sex shown in the film is shown for artistic purposes rather than just to shock people and make money to be shown in pornographic theaters in America. I AM CURIOUS-YELLOW is a good film for anyone wanting to study the meat and potatoes (no pun intended) of Swedish cinema. But really, this film doesn't have much of a plot.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "text": "\"I Am Curious: Yellow\" is a risible and pretentious steaming pile. It doesn't matter what one's political views are because this film can hardly be taken seriously on any level. As for the claim that frontal male nudity is an automatic NC-17, that isn't true. I've seen R-rated films with male nudity. Granted, they only offer some fleeting views, but where are the R-rated films with gaping vulvas and flapping labia? Nowhere, because they don't exist. The same goes for those crappy cable shows: schlongs swinging in the breeze but not a clitoris in sight. And those pretentious indie movies like The Brown Bunny, in which we're treated to the site of Vincent Gallo's throbbing johnson, but not a trace of pink visible on Chloe Sevigny. Before crying (or implying) \"double-standard\" in matters of nudity, the mentally obtuse should take into account one unavoidably obvious anatomical difference between men and women: there are no genitals on display when actresses appears nude, and the same cannot be said for a man. In fact, you generally won't see female genitals in an American film in anything short of porn or explicit erotica. This alleged double-standard is less a double standard than an admittedly depressing ability to come to terms culturally with the insides of women's bodies.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "text": "If only to avoid making this type of film in the future. This film is interesting as an experiment but tells no cogent story.<br /><br />One might feel virtuous for sitting thru it because it touches on so many IMPORTANT issues but it does so without any discernable motive. The viewer comes away with no new perspectives (unless one comes up with one while one's mind wanders, as it will invariably do during this pointless film).<br /><br />One might better spend one's time staring out a window at a tree growing.<br /><br />",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 3,
                          "row": {
                            "text": "This film was probably inspired by Godard's Masculin, fÃ©minin and I urge you to see that film instead.<br /><br />The film has two strong elements and those are, (1) the realistic acting (2) the impressive, undeservedly good, photo. Apart from that, what strikes me most is the endless stream of silliness. Lena Nyman has to be most annoying actress in the world. She acts so stupid and with all the nudity in this film,...it's unattractive. Comparing to Godard's film, intellectuality has been replaced with stupidity. Without going too far on this subject, I would say that follows from the difference in ideals between the French and the Swedish society.<br /><br />A movie of its time, and place. 2/10.",
                            "label": 0
                          },
                          "truncated_cells": []
                        }
                      ]
                    }
                  },
                  "image": {
                    "summary": "a column with images (only 4 rows are shown for brevity)",
                    "value": {
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "imageA",
                          "type": {
                            "_type": "Image"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "imageB",
                          "type": {
                            "_type": "Image"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "imageA": {
                              "url": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/0/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "url": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/0/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "imageA": {
                              "url": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/1/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "url": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/1/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "imageA": {
                              "url": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/2/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "url": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/2/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 3,
                          "row": {
                            "imageA": {
                              "url": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/3/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "url": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/huggan--horse2zebra-aligned/train/3/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        }
                      ]
                    }
                  },
                  "audio": {
                    "summary": "a column with audio files (only 4 rows are shown for brevity)",
                    "value": {
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "client_id",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "path",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 2,
                          "name": "audio",
                          "type": {
                            "sampling_rate": 48000,
                            "_type": "Audio"
                          }
                        },
                        {
                          "feature_idx": 3,
                          "name": "sentence",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 4,
                          "name": "up_votes",
                          "type": {
                            "dtype": "int64",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 5,
                          "name": "down_votes",
                          "type": {
                            "dtype": "int64",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 6,
                          "name": "age",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 7,
                          "name": "gender",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 8,
                          "name": "accent",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 9,
                          "name": "locale",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 10,
                          "name": "segment",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "client_id": "04960d53cc851eeb6d93f21a09e09ab36fe16943acb226ced1211d7250ab2f1b9a1d655c1cc03d50006e396010851ad52d4c53f49dd77b080b01c4230704c68d",
                            "path": null,
                            "audio": [
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/cached-assets/mozilla-foundation/common_voice_9_0/--/en/train/0/audio/audio.mp3",
                                "type": "audio/mpeg"
                              },
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/cached-assets/mozilla-foundation/common_voice_9_0/--/en/train/0/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "sentence": "Why does Melissandre look like she wants to consume Jon Snow on the ride up the wall?",
                            "up_votes": 2,
                            "down_votes": 0,
                            "age": "fourties",
                            "gender": "male",
                            "accent": "United States English",
                            "locale": "en",
                            "segment": ""
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "client_id": "f9f1f96bae1390dfe61ff298abb90975c079e913c712d57d97307ed797469eac446abb149daaad24cacffcc24e1e3275fefeb97f977eb74ce2233e0e5c1d437e",
                            "path": null,
                            "audio": [
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/cached-assets/mozilla-foundation/common_voice_9_0/--/en/train/1/audio/audio.mp3",
                                "type": "audio/mpeg"
                              },
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/cached-assets/mozilla-foundation/common_voice_9_0/--/en/train/1/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "sentence": "\"I'm getting them for twelve dollars a night.\"",
                            "up_votes": 2,
                            "down_votes": 0,
                            "age": "",
                            "gender": "",
                            "accent": "",
                            "locale": "en",
                            "segment": ""
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "client_id": "a6c7706a220eeea7ee3687c1122fe7ac17962d2449d25b6db37cc41cdaace442683e11945b6f581e73941c3083cd4eecfafc938840459cd8c571dae7774ee687",
                            "path": null,
                            "audio": [
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/cached-assets/mozilla-foundation/common_voice_9_0/--/en/train/2/audio/audio.mp3",
                                "type": "audio/mpeg"
                              },
                              {
                                "src": "https://datasets-server.us.dev.moon.huggingface.tech/cached-assets/mozilla-foundation/common_voice_9_0/--/en/train/2/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "sentence": "Tower of strength",
                            "up_votes": 2,
                            "down_votes": 0,
                            "age": "",
                            "gender": "",
                            "accent": "",
                            "locale": "en",
                            "segment": ""
                          },
                          "truncated_cells": []
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the external authentication step on the Hugging Face Hub failed, and no authentication mechanism has been provided. Retry with authentication.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-rows-401"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is gated.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the repository to download from cannot be found, or if the config or split does not exist in the dataset. Note that this may be because the dataset doesn't exist, or because it is set to `private` and you do not have access.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-rows-404"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "inexistent-config": {
                    "summary": "The config does not exist in the dataset.",
                    "value": { "error": "Not found." }
                  },
                  "inexistent-split": {
                    "summary": "The soplit does not exist in the dataset.",
                    "value": { "error": "Not found." }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Some of the `dataset`, `config`, `split`, `offset` or `length` parameters have not been provided or are invalid.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-rows-422"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "missing-dataset": {
                    "summary": "The dataset parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "missing-config": {
                    "summary": "The config parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "missing-split": {
                    "summary": "The split parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-dataset": {
                    "summary": "The dataset parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-config": {
                    "summary": "The config parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-split": {
                    "summary": "The split parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "negative-offset": {
                    "summary": "The offset must be positive.",
                    "value": {
                      "error": "Offset must be positive"
                    }
                  },
                  "negative-length": {
                    "summary": "The length must be positive.",
                    "value": {
                      "error": "Length must be positive"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-rows-500"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "not-ready": {
                    "summary": "the response is not ready yet.",
                    "value": {
                      "error": "The list of rows is not ready yet. Please retry later."
                    }
                  },
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Unexpected error."
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/parquet": {
      "get": {
        "summary": "List of parquet files",
        "description": "The dataset is converted to the parquet format. The endpoint gives the list of the parquet files.",
        "externalDocs": {
          "description": "See Parquet (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/parquet"
        },
        "operationId": "listParquetFiles",
        "security": [
          {},
          {
            "HuggingFaceCookie": []
          },
          {
            "HuggingFaceToken": []
          }
        ],
        "parameters": [
          {
            "name": "dataset",
            "in": "query",
            "description": "The identifier of the dataset on the Hub.",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "glue": { "summary": "a canonical dataset", "value": "glue" },
              "Helsinki-NLP/tatoeba_mt": {
                "summary": "a namespaced dataset",
                "value": "Helsinki-NLP/tatoeba_mt"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of parquet files.</br>Beware: the response is not paginated.",
            "headers": {
              "Cache-Control": { "$ref": "#/components/headers/Cache-Control" },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParquetFilesResponse"
                },
                "examples": {
                  "duorc": {
                    "summary": "duorc: six parquet files, one per split",
                    "value": {
                      "parquet_files": [
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "test",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/duorc-test.parquet",
                          "filename": "duorc-test.parquet",
                          "size": 6136590
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/duorc-train.parquet",
                          "filename": "duorc-train.parquet",
                          "size": 26005667
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "validation",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/duorc-validation.parquet",
                          "filename": "duorc-validation.parquet",
                          "size": 5566867
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "test",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/SelfRC/duorc-test.parquet",
                          "filename": "duorc-test.parquet",
                          "size": 3035735
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/SelfRC/duorc-train.parquet",
                          "filename": "duorc-train.parquet",
                          "size": 14851719
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "validation",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/SelfRC/duorc-validation.parquet",
                          "filename": "duorc-validation.parquet",
                          "size": 3114389
                        }
                      ]
                    }
                  },
                  "sharded": {
                    "summary": "alexandrainst/danish-wit: the parquet file for the train split is partitioned into 9 shards",
                    "value": {
                      "parquet_files": [
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "test",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-test.parquet",
                          "filename": "parquet-test.parquet",
                          "size": 48781933
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00000-of-00009.parquet",
                          "filename": "parquet-train-00000-of-00009.parquet",
                          "size": 937127291
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00001-of-00009.parquet",
                          "filename": "parquet-train-00001-of-00009.parquet",
                          "size": 925920565
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00002-of-00009.parquet",
                          "filename": "parquet-train-00002-of-00009.parquet",
                          "size": 940390661
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00003-of-00009.parquet",
                          "filename": "parquet-train-00003-of-00009.parquet",
                          "size": 934549621
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00004-of-00009.parquet",
                          "filename": "parquet-train-00004-of-00009.parquet",
                          "size": 493004154
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00005-of-00009.parquet",
                          "filename": "parquet-train-00005-of-00009.parquet",
                          "size": 942848888
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00006-of-00009.parquet",
                          "filename": "parquet-train-00006-of-00009.parquet",
                          "size": 933373843
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00007-of-00009.parquet",
                          "filename": "parquet-train-00007-of-00009.parquet",
                          "size": 936939176
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-train-00008-of-00009.parquet",
                          "filename": "parquet-train-00008-of-00009.parquet",
                          "size": 946933048
                        },
                        {
                          "dataset": "alexandrainst/danish-wit",
                          "config": "alexandrainst--danish-wit",
                          "split": "val",
                          "url": "https://huggingface.co/datasets/alexandrainst/danish-wit/resolve/refs%2Fconvert%2Fparquet/alexandrainst--danish-wit/parquet-val.parquet",
                          "filename": "parquet-val.parquet",
                          "size": 11437355
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the external authentication step on the Hugging Face Hub failed, and no authentication mechanism has been provided. Retry with authentication.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-splits-401"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is gated.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the repository to download from cannot be found. This may be because it doesn't exist, or because it is set to `private` and you do not have access.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-splits-404"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "The `dataset` parameter has not been provided.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-splits-422"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "missing-parameter": {
                    "summary": "The dataset parameter is missing.",
                    "value": { "error": "Parameter 'dataset' is required" }
                  },
                  "empty-parameter": {
                    "summary": "The dataset parameter is empty (?dataset=).",
                    "value": { "error": "Parameter 'dataset' is required" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-splits-500"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "not-ready": {
                    "summary": "the response is not ready yet.",
                    "value": {
                      "error": "The server is busier than usual and the response is not ready yet. Please retry later."
                    }
                  },
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Unexpected error."
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/valid": {
      "get": {
        "summary": "Valid datasets",
        "description": "The lists of the Hub datasets that work without an error, by type. It lists the datasets that have a Dataset Viewer (i.e. have been converted to Parquet format, and can be paginated) and the datasets that only have the Dataset Preview (the first 100 rows).",
        "externalDocs": {
          "description": "See Valid datasets (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/valid"
        },
        "operationId": "listValidDatasets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The valid datasets.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidResponse"
                },
                "examples": {
                  "valid": {
                    "summary": "list of datasets",
                    "value": {
                      "preview": [
                        "0n1xus/codexglue",
                        "0x7194633/rupile",
                        "AHussain0418/day2_data"
                      ],
                      "viewer": [
                        "0n1xus/pytorrent-standalone",
                        "51la5/keyword-extraction"
                      ],
                      "valid": [
                        "0n1xus/codexglue",
                        "0n1xus/pytorrent-standalone",
                        "0x7194633/rupile",
                        "51la5/keyword-extraction",
                        "AHussain0418/day2_data"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server crashed.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-valid-500"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Unexpected error."
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/is-valid": {
      "get": {
        "summary": "Check if a dataset is valid",
        "description": "Check if a dataset works without an error (for /splits and /first-rows).",
        "externalDocs": {
          "description": "See Valid datasets (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/valid"
        },
        "operationId": "isValidDataset",
        "security": [
          {},
          {
            "HuggingFaceCookie": []
          },
          {
            "HuggingFaceToken": []
          }
        ],
        "parameters": [
          {
            "name": "dataset",
            "in": "query",
            "description": "The identifier of the dataset on the Hub.",
            "required": true,
            "schema": { "type": "string" },
            "examples": {
              "glue": { "summary": "a canonical dataset", "value": "glue" },
              "Helsinki-NLP/tatoeba_mt": {
                "summary": "a namespaced dataset",
                "value": "Helsinki-NLP/tatoeba_mt"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The valid datasets.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsValidResponse"
                },
                "examples": {
                  "valid": {
                    "summary": "valid dataset",
                    "value": {
                      "valid": true
                    }
                  },
                  "invalid": {
                    "summary": "invalid dataset",
                    "value": {
                      "valid": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If the external authentication step on the Hugging Face Hub failed, and no authentication mechanism has been provided. Retry with authentication.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-is-valid-401"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is gated.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the dataset cannot be found. This may be because it doesn't exist, or because it is set to `private` and you do not have access.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-is-valid-404"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent-dataset": {
                    "summary": "The dataset does not exist, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "gated-dataset": {
                    "summary": "The dataset is gated, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  },
                  "private-dataset": {
                    "summary": "The dataset is private, while authentication was provided in the request.",
                    "value": {
                      "error": "The dataset does not exist, or is not accessible with the current credentials (private or gated). Please check the spelling of the dataset name or retry with other authentication credentials."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "The `dataset` parameter has not been provided.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-is-valid-422"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "missing-parameter": {
                    "summary": "The dataset parameter is missing.",
                    "value": { "error": "Parameter 'dataset' is required" }
                  },
                  "empty-parameter": {
                    "summary": "The dataset parameter is empty (?dataset=).",
                    "value": { "error": "Parameter 'dataset' is required" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server crashed.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-is-valid-500"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Unexpected error."
                    }
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal": {
                    "summary": "internal error",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
