# SPDX-License-Identifier: Apache-2.0
# Copyright 2022 The HuggingFace Authors.

## Production
#
# datasets-server is installed on a [kubernetes cluster](https://us-east-1.console.aws.amazon.com/eks/home?region=us-east-1#/clusters)
#
# Grafana:
#
# - https://grafana.huggingface.tech/d/SaHl2KX7z/datasets-server-admin-cache-and-queue
# - https://grafana.huggingface.tech/d/iPuzZbrnk/datasets-server-api-routes
# - https://grafana.huggingface.tech/d/85a562078cdf77779eaa1add43ccec1e/kubernetes-compute-resources-namespace-pods?var-datasource=Prometheus%20EKS%20Hub%20Prod&var-namespace=datasets-server
#
# BetterUptime:
#
# - https://betteruptime.com/team/14149/monitors/389098
# - https://betteruptime.com/team/14149/monitors/691070
#
# resources for the prod namespace are defined here: https://us-east-1.console.aws.amazon.com/eks/home?region=us-east-1#/clusters/hub-prod/nodegroups/datasets-server-20220513085103612000000001
# the nodes are up to 20 t3.2xlarge instances (8 vCPUs, 32 GiB), with autoscale
# (see https://github.com/huggingface/infra/pull/239/files)
# this means that we can get up to:
# 160 vCPUs and 640 GiB RAM are available (but no more than 8 cpus or 32 GiB for each pod)
#
# the max resources (limits) per deployment are:
# - reverse-proxy: 2 pods -> 2 CPUs, 512MiB
# - api: 4 pods -> 4 CPUs, 4 GiB
# - admin: 1 pod -> 1 CPU
# and for the workers:
# - splits: 1 CPUs, 30 GiB
# - firstRows: 1 CPUs, 30 GiB
# We set the requested RAM to 8 GiB per worker, in order to trigger the autoscale. We should be able to
# launch 3 worker pods per node, taking the sidecars into account, it means 60 pods
#
# Being optimistic about not all the pods having to increase their memory usage to 30 GiB at the same time,
# ie over-committing a bit, we can set up to 60 workers (dataset + split).
#
# For now, we have to scale manually with:
#  kubectl scale --replicas=16 deploy/datasets-server-prod-worker-splits
# or
#  kubectl scale --replicas=32 deploy/datasets-server-prod-worker-first-rows

# --- common parameters ---

hostname: "datasets-server.huggingface.co"

secrets:
  mongoUrl:
    fromSecret: true
    secretName: "mongo-url"
    value: mongo://
  token:
    fromSecret: true
    secretName: "hf-token"

persistence:
  # https://us-east-1.console.aws.amazon.com/fsx/home?region=us-east-1#file-system-details/fs-02050b8d555063cde
  # Alarm: https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#alarmsV2:alarm/Low+disk+on+datasets+server?
  existingClaim: "nfs-datasets-server-pvc"

monitoring:
  enabled: true

mongodb:
  # we use the secret instead to get the mongo URL
  enabled: false

common:
  # Log level
  logLevel: "DEBUG"

# --- jobs (pre-install/upgrade hooks) ---

mongodbMigration:
  nodeSelector:
    role-datasets-server: "true"

# --- reverse proxy ---

reverseProxy:
  nodeSelector:
    role-datasets-server: "true"
  replicas: 2
  resources:
    requests:
      cpu: 1
      memory: "256Mi"
    limits:
      cpu: 1
      memory: "256Mi"
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Env=prod,Project=datasets-server,Terraform=true
      service.beta.kubernetes.io/aws-load-balancer-name: hub-prod-datasets-server-nlb
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
      service.beta.kubernetes.io/aws-load-balancer-scheme: internal
      service.beta.kubernetes.io/aws-load-balancer-type: external
      service.beta.kubernetes.io/aws-load-balancer-target-node-labels: role-datasets-server=true
  tolerations:
    - key: CriticalAddonsOnly
      operator: Equal

ingress:
  annotations:
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:707930574880:certificate/971187a3-2baa-40e5-bcae-94d6ec55cd24
    alb.ingress.kubernetes.io/load-balancer-name: "hub-datasets-server-prod"
    alb.ingress.kubernetes.io/tags: "Env=prod,Project=datasets-server,Terraform=true"
    alb.ingress.kubernetes.io/target-node-labels: role-datasets-server=true
    alb.ingress.kubernetes.io/healthcheck-path: "/healthcheck"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80, "HTTPS": 443}]'
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/group.name: "datasets-server"
    kubernetes.io/ingress.class: "alb"

# --- services ---

admin:
  # Number of reports in /cache-reports/... endpoints
  cacheReportsNumResults: 1000
  # Number of uvicorn workers for running the application
  # (2 x $num_cores) + 1
  # https://docs.gunicorn.org/en/stable/design.html#how-many-workers
  uvicornNumWorkers: "9"

  nodeSelector:
    role-datasets-server: "true"
  replicas: 1
  resources:
    requests:
      cpu: 4
      memory: "512Mi"
    limits:
      cpu: 4
      memory: "4Gi"

api:
  # Number of uvicorn workers for running the application
  # (2 x $num_cores) + 1
  # https://docs.gunicorn.org/en/stable/design.html#how-many-workers
  uvicornNumWorkers: "9"

  nodeSelector:
    role-datasets-server: "true"
  replicas: 4
  resources:
    requests:
      cpu: 4
      memory: "512Mi"
    limits:
      cpu: 4
      memory: "4Gi"

# --- workers ---

splits:
  # override the common queue parameters
  queue:
    # Maximum number of jobs running at the same time for the same namespace
    maxJobsPerNamespace: 4

  nodeSelector:
    role-datasets-server: "true"
  replicas: 12
  resources:
    requests:
      cpu: 1
      memory: "8Gi"
    limits:
      cpu: 2
      memory: "30Gi"

firstRows:
  # Max size of the /first-rows endpoint response in bytes
  maxBytes: "200_000"

  # override the common queue parameters
  queue:
    # Maximum number of jobs running at the same time for the same namespace
    maxJobsPerNamespace: 17

  nodeSelector:
    role-datasets-server: "true"
  replicas: 30
  resources:
    requests:
      cpu: 1
      memory: "8Gi"
    limits:
      cpu: 2
      memory: "30Gi"
