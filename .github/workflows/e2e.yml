name: e2e
on:
  push:
    paths:
      - 'e2e/**'
env:
  working-directory: e2e
jobs:
  quality:
    uses: ./.github/workflows/quality-python.yml
    with:
      working-directory: ${{ env.working-directory }}

# DISABLED FOR NOW
# name: e2e tests
# on:
#   workflow_run:
#     workflows: ["Build and push docker images"]
#     types: [completed]
#     # note that it is run only on main! which is somewhat useless :'(
#     # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run
#   workflow_dispatch:
#     # ^ run manually if you need to have the e2e tests

# env:
#   REGION: us-east-1
#   # required to get access to use a cached poetry venv in "/home/runner/.cache/pypoetry/virtualenvs"
#   POETRY_VIRTUALENVS_IN_PROJECT: false

# jobs:
#   e2e-tests:
#     strategy:
#       fail-fast: false
#       matrix:
#         python-version: [3.9.6]
#         poetry-version: [1.1.13]
#         os: [ubuntu-latest]
#         working-directory: [e2e]
#     defaults:
#       run:
#         shell: bash
#         working-directory: ${{ matrix.working-directory }}
#     runs-on: ${{ matrix.os }}
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set outputs
#         id: vars
#         run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.REGION }}
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
#       - name: Install poetry
#         run: pipx install poetry==${{ matrix.poetry-version }}
#       - name: Use Python
#         uses: actions/setup-python@v3
#         with:
#           python-version: ${{ matrix.python-version }}
#           cache: 'poetry'
#           cache-dependency-path: |
#             ${{ matrix.working-directory }}/poetry.lock
#       - name: Launch the services
#         env:
#           DOCKER_TAG: sha-${{ steps.vars.outputs.sha_short }}
#         run: docker-compose -f tests/docker-compose.yml up -d
#       - name: Install dependencies
#         run: |
#           poetry env use "${{ matrix.python-version }}"
#           poetry install
#       - name: End-to-end tests
#         run: |
#           poetry run python -m pytest -x tests
