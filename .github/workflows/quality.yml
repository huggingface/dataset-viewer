name: Check code quality
on: [push]

env:
  # required to get access to use a cached poetry venv in "/home/runner/.cache/pypoetry/virtualenvs"
  POETRY_VIRTUALENVS_IN_PROJECT: false

jobs:
  code-quality:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9.6]
        poetry-version: [1.1.13]
        os: [ubuntu-latest]
        working-directory:
          [e2e, services/admin, services/api, libs/libcache, libs/libqueue, libs/libutils]
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.working-directory }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry==${{ matrix.poetry-version }}
      - name: Use Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
          cache-dependency-path: |
            ${{ matrix.working-directory }}/poetry.lock
      - name: Install dependencies
        # "poetry env use" is required: https://github.com/actions/setup-python/issues/374#issuecomment-1088938718
        run: |
          poetry env use "${{ matrix.python-version }}"
          poetry install
      - name: Run black
        run: poetry run black --check tests src
      - name: Run isort
        run: poetry run isort --check-only tests src
      - name: Run flake8
        run: poetry run flake8 tests src
      - name: Run mypy
        run: poetry run mypy tests src
      - name: Run bandit
        run: poetry run bandit -r src
      - name: Run safety
        run: poetry run safety check
  code-quality-job-runner:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9.6]
        poetry-version: [1.1.13]
        os: [ubuntu-latest]
        working-directory: [services/worker]
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.working-directory }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry==${{ matrix.poetry-version }}
      - name: Use Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
          cache-dependency-path: |
            ${{ matrix.working-directory }}/poetry.lock
      - name: Install packages
        run: sudo apt update; sudo apt install -y libicu-dev ffmpeg libavcodec-extra libsndfile1 llvm
      - name: Install dependencies
        run: |
          poetry env use "${{ matrix.python-version }}"
          poetry install
      - name: Run black
        run: poetry run black --check tests src
      - name: Run isort
        run: poetry run isort --check-only tests src
      - name: Run flake8
        run: poetry run flake8 tests src
      - name: Run mypy
        run: poetry run mypy tests src
      - name: Run bandit
        run: poetry run bandit -r src
      - name: Run safety
        env:
          # pillow <9.0.0
          PILLOW_EXCEPTIONS: -i 44525 -i 44524 -i 44486 -i 44485 -i 45356 -i 44487
        run: poetry run safety check $PILLOW_EXCEPTIONS
  code-quality-helm:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@main

      - name: Lint chart
        run: helm lint
        working-directory: infra/charts/datasets-server
