# SPDX-License-Identifier: Apache-2.0
# Copyright 2022 The HuggingFace Authors.

name: Launch end-to-end tests
on:
  workflow_call:
    inputs:
      config-file:
        required: true
        type: string
env:
  python-version: 3.9.6
  poetry-version: 1.2.2
  # required to get access to use a cached poetry venv in "/home/runner/.cache/pypoetry/virtualenvs"
  POETRY_VIRTUALENVS_IN_PROJECT: false
  working-directory: e2e
jobs:
  get-config:
    runs-on: ubuntu-latest
    outputs:
      dockerConfig: ${{ steps.set-var.outputs.dockerConfig }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: './'
      - name: Get docker images
        id: set-var
        run: |
          # from https://trstringer.com/github-actions-multiline-strings/
          dockerConfig=`cat ${{ inputs.config-file }}`
          # end of optional handling for multi line json
          echo "dockerConfig<<EOF" >> $GITHUB_OUTPUT
          echo "$dockerConfig" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  e2e-tests:
    needs: get-config
    defaults:
      run:
        shell: bash
        working-directory: e2e
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry==${{ env.poetry-version }}
      - name: Use Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}
          cache: 'poetry'
          cache-dependency-path: |
            ${{ env.working-directory }}/poetry.lock
      - name: Launch the services
        env:
          IMAGE_REVERSE_PROXY: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.reverseProxy}}"
          IMAGE_SERVICE_ADMIN: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.services.admin}}"
          IMAGE_SERVICE_API: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.services.api}}"
          IMAGE_WORKER_SPLITS: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.workers.splits}}"
          IMAGE_WORKER_FIRST_ROWS: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.workers.firstRows}}"
          WORKER_SLEEP_TIME: "1"
          # hard coded, see e2e/tests/fixtures/hub.py
          COMMON_HF_ENDPOINT: "https://hub-ci.huggingface.co"
          COMMON_HF_TOKEN: "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"
          FIRST_ROWS_MAX_NUMBER: "4"
          PORT_REVERSE_PROXY: "8000"
          PROMETHEUS_MULTIPROC_DIR: "/tmp"
          API_UVICORN_NUM_WORKERS: "2"
          API_UVICORN_PORT: "8080"
          ADMIN_UVICORN_NUM_WORKERS: "2"
          ADMIN_UVICORN_PORT: "8081"
        working-directory: tools
        run: docker compose -f ./docker-compose-datasets-server.yml up -d
      - name: Install dependencies
        run: |
          poetry env use "${{ env.python-version }}"
          poetry install
      - name: End-to-end tests
        env:
          QUEUE_SLEEP_TIME: "1"
          # hard coded, see e2e/tests/fixtures/hub.py
          COMMON_HF_ENDPOINT: "https://hub-ci.huggingface.co"
          COMMON_HF_TOKEN: "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"
          FIRST_ROWS_MAX_NUMBER: "4"
          PORT_REVERSE_PROXY: "8000"
          PROMETHEUS_MULTIPROC_DIR: "/tmp"
          API_UVICORN_NUM_WORKERS: "2"
          API_UVICORN_PORT: "8080"
          ADMIN_UVICORN_NUM_WORKERS: "2"
          ADMIN_UVICORN_PORT: "8081"
        run: |
          poetry run python -m pytest -vv -x tests
