name: Launch end-to-end tests
on:
  workflow_call:
    inputs:
      config-file:
        required: true
        type: string
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
env:
  python-version: 3.9.6
  poetry-version: 1.1.13
  # required to get access to use a cached poetry venv in "/home/runner/.cache/pypoetry/virtualenvs"
  POETRY_VIRTUALENVS_IN_PROJECT: false
  region: us-east-1
  working-directory: e2e
jobs:
  get-config:
    runs-on: ubuntu-latest
    outputs:
      dockerConfig: ${{ steps.set-var.outputs.dockerConfig }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: './'
      - name: Get docker images
        id: set-var
        run: |
          # from https://stackoverflow.com/a/61919791/7351594
          content=`cat ${{ inputs.config-file }}`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=dockerConfig::$content"
  e2e-tests:
    needs: get-config
    defaults:
      run:
        shell: bash
        working-directory: e2e
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ env.region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Install poetry
        run: pipx install poetry==${{ env.poetry-version }}
      - name: Use Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.python-version }}
          cache: 'poetry'
          cache-dependency-path: |
            ${{ env.working-directory }}/poetry.lock
      - name: Launch the services
        env:
          SERVICE_ADMIN_DOCKER_IMAGE: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.admin}}"
          SERVICE_API_DOCKER_IMAGE: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.api}}"
          SERVICE_DATASETS_WORKER_DOCKER_IMAGE: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.datasetsWorker}}"
          SERVICE_REVERSE_PROXY_DOCKER_IMAGE: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.reverseProxy}}"
          SERVICE_SPLITS_WORKER_DOCKER_IMAGE: "${{fromJson(needs.get-config.outputs.dockerConfig).dockerImage.splitsWorker}}"
        working-directory: tools
        run: docker-compose -f ./docker-compose-datasets-server-from-remote-images.yml up -d
      - name: Install dependencies
        run: |
          poetry env use "${{ env.python-version }}"
          poetry install
      - name: End-to-end tests
        run: |
          poetry run python -m pytest -x tests
