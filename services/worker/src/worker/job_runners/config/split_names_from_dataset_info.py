# SPDX-License-Identifier: Apache-2.0
# Copyright 2022 The HuggingFace Authors.

import logging
from http import HTTPStatus
from typing import Any, List, Literal, Mapping, Optional

from libcommon.constants import (
    PROCESSING_STEP_SPLIT_NAMES_FROM_DATASET_INFO_VERSION,
    PROCESSING_STEP_SPLIT_NAMES_FROM_STREAMING_VERSION,
)
from libcommon.simple_cache import SplitFullName

from worker.job_runner import (
    CompleteJobResult,
    JobRunnerError,
    ParameterMissingError,
    get_previous_step_or_raise,
)
from worker.job_runners._datasets_based_job_runner import DatasetsBasedJobRunner
from worker.utils import SplitItem, SplitsList

SplitNamesFromDatasetInfoJobRunnerErrorCode = Literal[
    "PreviousStepFormatError",
    "ResponseAlreadyComputedError",
]


class SplitNamesFromDatasetInfoJobRunnerError(JobRunnerError):
    """Base class for split names job runner exceptions."""

    def __init__(
        self,
        message: str,
        status_code: HTTPStatus,
        code: SplitNamesFromDatasetInfoJobRunnerErrorCode,
        cause: Optional[BaseException] = None,
        disclose_cause: bool = False,
    ):
        super().__init__(
            message=message, status_code=status_code, code=code, cause=cause, disclose_cause=disclose_cause
        )


class PreviousStepFormatError(SplitNamesFromDatasetInfoJobRunnerError):
    """Raised when the content of the previous step has not the expected format."""

    def __init__(self, message: str, cause: Optional[BaseException] = None):
        super().__init__(message, HTTPStatus.INTERNAL_SERVER_ERROR, "PreviousStepFormatError", cause, False)


class ResponseAlreadyComputedError(SplitNamesFromDatasetInfoJobRunnerError):
    """Raised when response has been already computed by /split-names-from-streaming job runner."""

    def __init__(self, message: str, cause: Optional[BaseException] = None):
        super().__init__(message, HTTPStatus.INTERNAL_SERVER_ERROR, "ResponseAlreadyComputedError", cause, True)


def compute_split_names_from_dataset_info_response(dataset: str, config: str) -> SplitsList:
    """
    Get the response of /split-names-from-dataset-info for one specific dataset and config on huggingface.co
    computed from cached response in dataset-info step.

    The /split-names-from-dataset-info response generated by this function does not include stats about the split,
    like the size or number of samples. See dataset-info or dataset-size for that.

    Args:
        dataset (`str`):
            A namespace (user or an organization) and a repo name separated
            by a `/`.
        config (`str`):
            A configuration name.
    Returns:
        `SplitsList`: An object with the list of split names for the dataset and config.
    <Tip>
    Raises the following errors:
        - [`~job_runner.PreviousStepError`]
            If the previous step gave an error.
        - [`~job_runners.config.split_names_from_dataset_info.PreviousStepFormatError`]
            If the content of the previous step has not the expected format
    </Tip>
    """
    logging.info(f"get split names from dataset info for dataset={dataset}, config={config}")
    config_info_best_response = get_previous_step_or_raise(kinds=["config-info"], dataset=dataset, config=config)

    try:
        splits_content = config_info_best_response.response["content"]["dataset_info"]["splits"]
    except Exception as e:
        raise PreviousStepFormatError("Previous step 'config-info' did not return the expected content.") from e

    split_name_items: List[SplitItem] = [
        {"dataset": dataset, "config": config, "split": str(split)} for split in splits_content
    ]

    return SplitsList(splits=split_name_items)


class SplitNamesFromDatasetInfoJobRunner(DatasetsBasedJobRunner):
    @staticmethod
    def get_job_type() -> str:
        return "/split-names-from-dataset-info"

    @staticmethod
    def get_job_runner_version() -> int:
        return PROCESSING_STEP_SPLIT_NAMES_FROM_DATASET_INFO_VERSION

    def compute(self) -> CompleteJobResult:
        if self.dataset is None:
            raise ParameterMissingError("'dataset' parameter is required")
        if self.config is None:
            raise ParameterMissingError("'config' parameter is required")
        """
        Raises [`~job_runners.config.split_names_from_dataset_info.ResponseAlreadyComputedError`]
          If response has been already computed by /split-names-from-streaming job runner.
        """
        self.raise_if_parallel_response_exists(
            parallel_cache_kind="/split-names-from-streaming",
            parallel_job_version=PROCESSING_STEP_SPLIT_NAMES_FROM_STREAMING_VERSION,
        )
        return CompleteJobResult(
            compute_split_names_from_dataset_info_response(dataset=self.dataset, config=self.config)
        )

    def get_new_splits(self, content: Mapping[str, Any]) -> set[SplitFullName]:
        """Get the set of new splits, from the content created by the compute."""
        return {SplitFullName(dataset=s["dataset"], config=s["config"], split=s["split"]) for s in content["splits"]}
