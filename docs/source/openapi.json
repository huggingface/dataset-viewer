{
  "openapi": "3.1.0",
  "info": {
    "title": "Datasets server API",
    "description": "The ðŸ¤— Datasets server API gives access to the contents, metadata and basic statistics of the Hugging Face Hub datasets.",
    "contact": {
      "name": "API Support",
      "email": "website@huggingface.co",
      "url": "https://github.com/huggingface/datasets-server/"
    },
    "version": "1.0",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "tags": [
    {
      "name": "datasets",
      "description": "API to access datasets"
    }
  ],
  "servers": [
    {
      "url": "https://datasets-server.huggingface.co",
      "description": "Production server"
    }
  ],
  "components": {
    "headers": {
      "Access-Control-Allow-Origin": {
        "description": "Indicates whether the response can be shared with requesting code from the given origin.",
        "schema": {
          "type": "string"
        },
        "example": "*",
        "required": true
      },
      "Cache-Control": {
        "description": "Directives that control caching in browsers and shared caches. This directive is used internally for caching the responses: the API will serve the same response until the cache has expired.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "no-cache": {
            "summary": "No cache.",
            "value": "no-cache"
          },
          "max-age": {
            "summary": "Cache TTL.",
            "value": "max-age=120"
          }
        },
        "required": true
      },
      "X-Error-Code-401": {
        "description": "A string that identifies the underlying error for 401.",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/X-Error-Code-ExternalUnauthenticatedError"
            }
          ]
        },
        "required": true
      },
      "X-Error-Code-404": {
        "description": "A string that identifies the underlying error for 404.",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/X-Error-Code-ExternalAuthenticatedError"
            },
            { "$ref": "#/components/schemas/X-Error-Code-ResponseNotFound" }
          ]
        },
        "required": true
      },
      "X-Error-Code-422": {
        "description": "A string that identifies the underlying error for 422.",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/X-Error-Code-MissingRequiredParameter"
            }
          ]
        },
        "required": true
      },
      "X-Error-Code-500": {
        "description": "A string that identifies the underlying error for 500. It's marked as required: false because the header can be missing on text-plain response.",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/X-Error-Code-ResponseNotReadyError"
            },
            { "$ref": "#/components/schemas/X-Error-Code-UnexpectedError" }
          ]
        },
        "required": false
      },
      "X-Error-Code-500-first-rows": {
        "description": "A string that identifies the underlying error for 500 on /first-rows. It's marked as required: false because the header can be missing on text-plain response.",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/X-Error-Code-ResponseNotReadyError"
            },
            { "$ref": "#/components/schemas/X-Error-Code-UnexpectedError" },
            { "$ref": "#/components/schemas/X-Error-Code-StreamingRowsError" }
          ]
        },
        "required": false
      },
      "X-Error-Code-500-is-valid": {
        "description": "A string that identifies the underlying error for 500 on /is-valid. It's marked as required: false because the header can be missing on text-plain response.",
        "schema": {
          "oneOf": [
            { "$ref": "#/components/schemas/X-Error-Code-UnexpectedError" }
          ]
        },
        "required": false
      },
      "X-Error-Code-500-common": {
        "description": "A string that identifies the underlying error for 500 on /parquet. It's marked as required: false because the header can be missing on text-plain response.",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/X-Error-Code-ResponseNotReadyError"
            },
            { "$ref": "#/components/schemas/X-Error-Code-UnexpectedError" },
            {
              "$ref": "#/components/schemas/X-Error-Code-ExternalFilesSizeRequestHTTPError"
            }
          ]
        },
        "required": false
      },
      "X-Error-Code-500-rows": {
        "description": "A string that identifies the underlying error for 500 on /rows. It's marked as required: false because the header can be missing on text-plain response.",
        "schema": {
          "oneOf": [
            { "$ref": "#/components/schemas/X-Error-Code-UnexpectedError" },
            {
              "$ref": "#/components/schemas/X-Error-Code-RowsPostProcessingError"
            }
          ]
        },
        "required": false
      },
      "X-Error-Code-500-search": {
        "description": "A string that identifies the underlying error for 500 on /search. It's marked as required: false because the header can be missing on text-plain response.",
        "schema": {
          "oneOf": [
            { "$ref": "#/components/schemas/X-Error-Code-UnexpectedError" },
            {
              "$ref": "#/components/schemas/X-Error-Code-RowsPostProcessingError"
            }
          ]
        },
        "required": false
      },
      "X-Error-Code-501": {
        "description": "A string that identifies the underlying error for 501.",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/X-Error-Code-DatasetInBlockListError"
            },
            {
              "$ref": "#/components/schemas/X-Error-Code-DatasetWithTooManyConfigsError"
            }
          ]
        },
        "required": true
      }
    },
    "schemas": {
      "ServerErrorResponse": {
        "type": "string",
        "example": "Internal Server Error"
      },
      "ConfigItem": {
        "type": "object",
        "required": ["dataset", "config"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          }
        }
      },
      "ConfigItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ConfigItem"
        }
      },
      "FailedConfigItem": {
        "type": "object",
        "required": ["dataset", "config", "error"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/CustomError"
          }
        }
      },
      "FailedConfigItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FailedConfigItem"
        }
      },
      "SplitsResponse": {
        "type": "object",
        "required": ["splits"],
        "properties": {
          "splits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SplitItem"
            }
          },
          "pending": {
            "$ref": "#/components/schemas/ConfigItems"
          },
          "failed": {
            "$ref": "#/components/schemas/FailedConfigItems"
          }
        }
      },
      "SplitItem": {
        "type": "object",
        "required": ["dataset", "config", "split"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "split": {
            "type": "string"
          }
        }
      },
      "CustomError": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "string"
          },
          "cause_exception": {
            "type": "string"
          },
          "cause_message": {
            "type": "string"
          },
          "cause_traceback": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FirstRowsResponse": {
        "type": "object",
        "required": ["dataset", "config", "split", "features", "rows"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "split": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureItem"
            }
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowItem"
            }
          },
          "truncated": {
            "type": "boolean"
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "required": ["features", "rows", "num_rows_total", "num_rows_per_page"],
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureItem"
            }
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowItem"
            }
          },
          "num_rows_total": {
            "type": "integer"
          },
          "num_rows_per_page": {
            "type": "integer"
          }
        }
      },
      "FeatureItem": {
        "type": "object",
        "required": ["feature_idx", "name", "type"],
        "properties": {
          "feature_idx": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/Feature"
          }
        }
      },
      "Feature": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValueFeature"
          },
          {
            "$ref": "#/components/schemas/ClassLabelFeature"
          },
          {
            "$ref": "#/components/schemas/ArrayXDFeature"
          },
          {
            "$ref": "#/components/schemas/TranslationFeature"
          },
          {
            "$ref": "#/components/schemas/TranslationVariableLanguagesFeature"
          },
          {
            "$ref": "#/components/schemas/SequenceFeature"
          },
          {
            "$ref": "#/components/schemas/DictFeature"
          },
          {
            "$ref": "#/components/schemas/ListFeature"
          },
          {
            "$ref": "#/components/schemas/AudioFeature"
          },
          {
            "$ref": "#/components/schemas/ImageFeature"
          }
        ]
      },
      "ValueFeature": {
        "type": "object",
        "required": ["_type", "dtype"],
        "properties": {
          "_type": {
            "type": "string",
            "enum": ["Value"]
          },
          "dtype": {
            "type": "string",
            "enum": [
              "null",
              "bool",
              "int8",
              "int16",
              "int32",
              "int64",
              "uint8",
              "uint16",
              "uint32",
              "uint64",
              "float16",
              "float32 (alias float)",
              "float64 (alias double)",
              "time32[(s|ms)]",
              "time64[(us|ns)]",
              "timestamp[(s|ms|us|ns)]",
              "timestamp[(s|ms|us|ns), tz=(tzstring)]",
              "date32",
              "date64",
              "duration[(s|ms|us|ns)]",
              "decimal128(precision, scale)",
              "decimal256(precision, scale)",
              "binary",
              "large_binary",
              "string",
              "large_string"
            ]
          }
        }
      },
      "ClassLabelFeature": {
        "type": "object",
        "required": ["_type", "names"],
        "properties": {
          "_type": {
            "type": "string",
            "enum": ["ClassLabel"]
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ArrayXDFeature": {
        "type": "object",
        "required": ["_type", "shape"],
        "properties": {
          "_type": {
            "type": "string",
            "enum": ["Array2D", "Array3D", "Array4D", "Array5D"]
          },
          "shape": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            }
          }
        }
      },
      "TranslationFeature": {
        "type": "object",
        "required": ["_type", "languages"],
        "properties": {
          "_type": {
            "type": "string",
            "enum": ["Translation"]
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TranslationVariableLanguagesFeature": {
        "type": "object",
        "required": ["_type", "languages"],
        "properties": {
          "_type": {
            "type": "string",
            "enum": ["TranslationVariableLanguages"]
          },
          "num_languages": {
            "type": "integer"
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SequenceFeature": {
        "type": "object",
        "required": ["_type", "feature"],
        "properties": {
          "_type": {
            "type": "string",
            "enum": ["Sequence"]
          },
          "length": {
            "type": "integer"
          },
          "feature": {
            "$ref": "#/components/schemas/Feature"
          }
        }
      },
      "DictFeature": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Feature"
        }
      },
      "ListFeature": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Feature"
        }
      },
      "AudioFeature": {
        "type": "object",
        "required": ["_type", "sampling_rate"],
        "properties": {
          "_type": {
            "type": "string",
            "enum": ["Audio"]
          },
          "sampling_rate": {
            "type": "number"
          },
          "mono": {
            "type": "boolean"
          },
          "decode": {
            "type": "boolean"
          }
        }
      },
      "ImageFeature": {
        "type": "object",
        "required": ["_type"],
        "properties": {
          "_type": {
            "type": "string",
            "enum": ["Image"]
          },
          "decode": {
            "type": "boolean"
          }
        }
      },
      "RowItem": {
        "type": "object",
        "required": ["row_idx", "row", "truncated_cells"],
        "properties": {
          "row_idx": {
            "type": "integer"
          },
          "row": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Cell"
            }
          },
          "truncated_cells": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Cell": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValueCell"
          },
          {
            "$ref": "#/components/schemas/ClassLabelCell"
          },
          {
            "$ref": "#/components/schemas/Array2DCell"
          },
          {
            "$ref": "#/components/schemas/Array3DCell"
          },
          {
            "$ref": "#/components/schemas/Array4DCell"
          },
          {
            "$ref": "#/components/schemas/Array5DCell"
          },
          {
            "$ref": "#/components/schemas/TranslationCell"
          },
          {
            "$ref": "#/components/schemas/TranslationVariableLanguagesCell"
          },
          {
            "$ref": "#/components/schemas/SequenceCell"
          },
          {
            "$ref": "#/components/schemas/DictCell"
          },
          {
            "$ref": "#/components/schemas/ListCell"
          },
          {
            "$ref": "#/components/schemas/AudioCell"
          },
          {
            "$ref": "#/components/schemas/ImageCell"
          },
          {
            "$ref": "#/components/schemas/NullableImagesListCell"
          }
        ]
      },
      "ValueCell": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "integer"
          },
          {
            "type": "number"
          },
          {
            "type": "string"
          }
        ],
        "nullable": true
      },
      "ClassLabelCell": {
        "type": "integer"
      },
      "Array2DCell": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      },
      "Array3DCell": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Array2DCell"
        }
      },
      "Array4DCell": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Array3DCell"
        }
      },
      "Array5DCell": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Array4DCell"
        }
      },
      "TranslationCell": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "TranslationVariableLanguagesCell": {
        "type": "object",
        "required": ["language", "translation"],
        "properties": {
          "language": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "translation": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SequenceCell": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ListCell"
          },
          {
            "$ref": "#/components/schemas/DictionaryOfListsCell"
          }
        ]
      },
      "ListCell": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Cell"
        }
      },
      "DictionaryOfListsCell": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ListCell"
        }
      },
      "DictCell": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Cell"
        }
      },
      "AudioCell": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["src", "type"],
          "properties": {
            "src": {
              "type": "string",
              "format": "uri"
            },
            "type": {
              "type": "string",
              "enum": ["audio/wav", "audio/mpeg"]
            }
          }
        }
      },
      "ImageCell": {
        "type": "object",
        "properties": {
          "src": {
            "type": "string",
            "format": "uri"
          },
          "height": {
            "type": "integer"
          },
          "width": {
            "type": "integer"
          }
        },
        "required": ["src", "height", "width"]
      },
      "NullableImagesListCell": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/ImageCell"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "IsValidResponse": {
        "type": "object",
        "required": ["preview", "viewer", "search"],
        "properties": {
          "viewer": {
            "type": "boolean"
          },
          "preview": {
            "type": "boolean"
          },
          "search": {
            "type": "boolean"
          }
        }
      },
      "PreviousJob": {
        "type": "object",
        "required": ["dataset", "config", "split", "kind"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "split": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
        }
      },
      "PreviousJobs": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PreviousJob"
        }
      },
      "ParquetResponse": {
        "type": "object",
        "required": ["parquet_files", "partial"],
        "properties": {
          "parquet_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SplitHubFile"
            }
          },
          "features": {
            "type": "object"
          },
          "pending": {
            "$ref": "#/components/schemas/PreviousJobs"
          },
          "failed": {
            "$ref": "#/components/schemas/PreviousJobs"
          },
          "partial": {
            "$ref": "#/components/schemas/Partial"
          }
        }
      },
      "SplitHubFile": {
        "type": "object",
        "required": ["dataset", "config", "split", "url", "filename", "size"],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "split": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "filename": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          }
        }
      },
      "InfoResponse": {
        "type": "object",
        "required": ["dataset_info", "partial"],
        "properties": {
          "dataset_info": {
            "type": "object",
            "description": "A dump of the DatasetInfo object from the datasets library. See https://huggingface.co/docs/datasets/en/package_reference/main_classes#datasets.DatasetInfo. We don't describe the contents of these metadata for now."
          },
          "pending": {
            "$ref": "#/components/schemas/PreviousJobs"
          },
          "failed": {
            "$ref": "#/components/schemas/PreviousJobs"
          },
          "partial": {
            "$ref": "#/components/schemas/Partial"
          }
        }
      },
      "Partial": {
        "type": "boolean",
        "description": "True means that the response has been computed on part of the dataset (typically the first 5GB). False means that the complete dataset was used."
      },
      "DatasetSize": {
        "type": "object",
        "required": [
          "dataset",
          "num_bytes_parquet_files",
          "num_bytes_memory",
          "num_rows"
        ],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "num_bytes_original_files": {
            "type": "integer"
          },
          "num_bytes_parquet_files": {
            "type": "integer"
          },
          "num_bytes_memory": {
            "type": "integer"
          },
          "num_rows": {
            "type": "integer"
          }
        }
      },
      "ConfigSize": {
        "type": "object",
        "required": [
          "dataset",
          "config",
          "num_bytes_parquet_files",
          "num_bytes_memory",
          "num_rows",
          "num_columns"
        ],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "num_bytes_original_files": {
            "type": "integer"
          },
          "num_bytes_parquet_files": {
            "type": "integer"
          },
          "num_bytes_memory": {
            "type": "integer"
          },
          "num_rows": {
            "type": "integer"
          },
          "num_columns": {
            "type": "integer"
          }
        }
      },
      "SplitSize": {
        "type": "object",
        "required": [
          "dataset",
          "config",
          "split",
          "num_bytes_parquet_files",
          "num_bytes_memory",
          "num_rows",
          "num_columns"
        ],
        "properties": {
          "dataset": {
            "type": "string"
          },
          "config": {
            "type": "string"
          },
          "split": {
            "type": "string"
          },
          "num_bytes_parquet_files": {
            "type": "integer"
          },
          "num_bytes_memory": {
            "type": "integer"
          },
          "num_rows": {
            "type": "integer"
          },
          "num_columns": {
            "type": "integer"
          }
        }
      },
      "DatasetSizeResponse": {
        "type": "object",
        "required": ["size", "pending", "failed", "partial"],
        "properties": {
          "size": {
            "type": "object",
            "required": ["dataset", "configs", "splits"],
            "properties": {
              "dataset": {
                "$ref": "#/components/schemas/DatasetSize"
              },
              "configs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConfigSize"
                }
              },
              "splits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SplitSize"
                }
              }
            }
          },
          "pending": {
            "$ref": "#/components/schemas/PreviousJobs"
          },
          "failed": {
            "$ref": "#/components/schemas/PreviousJobs"
          },
          "partial": {
            "$ref": "#/components/schemas/Partial"
          }
        }
      },
      "ConfigSizeResponse": {
        "type": "object",
        "required": ["size", "partial"],
        "properties": {
          "size": {
            "type": "object",
            "required": ["config", "splits"],
            "properties": {
              "config": {
                "$ref": "#/components/schemas/ConfigSize"
              },
              "splits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SplitSize"
                }
              }
            }
          },
          "partial": {
            "$ref": "#/components/schemas/Partial"
          }
        }
      },
      "SizeResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DatasetSizeResponse"
          },
          {
            "$ref": "#/components/schemas/ConfigSizeResponse"
          }
        ]
      },
      "OptInOutUrlsCountResponse": {
        "type": "object",
        "required": [
          "urls_columns",
          "num_opt_in_urls",
          "num_opt_out_urls",
          "num_urls",
          "num_scanned_rows",
          "has_urls_columns"
        ],
        "properties": {
          "urls_columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "num_opt_in_urls": {
            "type": "integer"
          },
          "num_opt_out_urls": {
            "type": "integer"
          },
          "num_urls": {
            "type": "integer"
          },
          "num_scanned_rows": {
            "type": "integer"
          },
          "has_urls_columns": {
            "type": "boolean"
          },
          "full_scan": { "anyOf": [{ "type": "boolean" }, { "type": "null" }] }
        }
      },
      "ColumnType": {
        "type": "string",
        "enum": ["float", "int", "class_label", "string_label", "string_text"]
      },
      "Histogram": {
        "type": "object",
        "required": ["hist", "bin_edges"],
        "properties": {
          "hist": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "bin_edges": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "NumericalStatisticsItem": {
        "type": "object",
        "required": [
          "nan_count",
          "nan_proportion",
          "min",
          "max",
          "mean",
          "median",
          "std",
          "histogram"
        ],
        "properties": {
          "nan_count": {
            "type": "integer"
          },
          "nan_proportion": {
            "type": "number"
          },
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          },
          "mean": {
            "type": "number"
          },
          "median": {
            "type": "number"
          },
          "std": {
            "type": "number"
          },
          "histogram": {
            "$ref": "#/components/schemas/Histogram"
          }
        }
      },
      "CategoricalStatisticsItem": {
        "type": "object",
        "required": ["nan_count", "nan_proportion", "n_unique", "frequencies"],
        "properties": {
          "nan_count": {
            "type": "integer"
          },
          "nan_proportion": {
            "type": "number"
          },
          "n_unique": {
            "type": "integer"
          },
          "frequencies": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        }
      },
      "StatisticsPerColumnItem": {
        "type": "object",
        "required": ["column_name", "column_type", "column_statistics"],
        "properties": {
          "column_name": {
            "type": "string"
          },
          "column_type": {
            "$ref": "#/components/schemas/ColumnType"
          },
          "column_statistics": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumericalStatisticsItem"
              },
              {
                "$ref": "#/components/schemas/CategoricalStatisticsItem"
              }
            ]
          }
        }
      },
      "StatisticsResponse": {
        "type": "object",
        "required": ["statistics", "num_examples"],
        "properties": {
          "statistics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsPerColumnItem"
            }
          },
          "num_examples": {
            "type": "integer"
          }
        }
      },
      "X-Error-Code-DatasetInBlockListError": {
        "type": "string",
        "const": "DatasetInBlockListError",
        "description": "The dataset is in the list of blocked datasets."
      },
      "X-Error-Code-DatasetWithTooManyConfigsError": {
        "type": "string",
        "const": "DatasetWithTooManyConfigsError",
        "description": "The number of configs of a dataset exceeded the limit."
      },
      "X-Error-Code-ExternalAuthenticatedError": {
        "type": "string",
        "const": "ExternalAuthenticatedError",
        "description": "Raised when the external authentication check failed while the user was authenticated. Even if the external authentication server returns 403 in that case, we return 404 because we don't know if the dataset exist or not. It's also coherent with how the Hugging Face Hub works."
      },
      "X-Error-Code-ExternalFilesSizeRequestHTTPError": {
        "type": "string",
        "const": "ExternalFilesSizeRequestHTTPError",
        "description": "We failed to get the size of the external files."
      },
      "X-Error-Code-ExternalUnauthenticatedError": {
        "type": "string",
        "const": "ExternalUnauthenticatedError",
        "description": "The external authentication check failed while the user was unauthenticated."
      },
      "X-Error-Code-ResponseNotFound": {
        "type": "string",
        "const": "ResponseNotFound",
        "description": "Raised when the response has not been found."
      },
      "X-Error-Code-MissingRequiredParameter": {
        "type": "string",
        "const": "MissingRequiredParameter",
        "description": "A required parameter is missing."
      },
      "X-Error-Code-ResponseNotReadyError": {
        "type": "string",
        "const": "ResponseNotReadyError",
        "description": "The response has not been processed yet."
      },
      "X-Error-Code-RowsPostProcessingError": {
        "type": "string",
        "const": "RowsPostProcessingError",
        "description": "The rows could not be post-processed successfully."
      },
      "X-Error-Code-StreamingRowsError": {
        "type": "string",
        "const": "StreamingRowsError",
        "description": "The rows could not be fetched in streaming mode."
      },
      "X-Error-Code-UnexpectedError": {
        "type": "string",
        "const": "UnexpectedError",
        "description": "The job runner raised an unexpected error."
      }
    },
    "securitySchemes": {
      "CookieHuggingFace": {
        "type": "apiKey",
        "description": "The HuggingFace cookie. Get it by logging in to https://huggingface.co/. It can only be used from the huggingface.co domain, and can thus only be used by Hub features like the [dataset viewer](https://huggingface.co/docs/hub/datasets-viewer), for example.",
        "name": "token",
        "in": "cookie"
      },
      "AuthorizationHuggingFaceApiToken": {
        "type": "http",
        "description": "The HuggingFace API token. Create a User Access Token with read access at https://huggingface.co/settings/tokens. You can also use an Organization API token. It gives access to the public datasets, and to the [gated datasets](https://huggingface.co/docs/hub/datasets-gated) for which you have accepted the conditions.",
        "scheme": "bearer",
        "bearerFormat": "A User Access Token is prefixed with `hf_`, while an Organization API token is prefixed with `api_org_`."
      },
      "AuthorizationHuggingFaceJWT": {
        "type": "http",
        "description": "A JWT generated by the HuggingFace Hub, when it calls the API. This mechanism only works for JWT signed with the HuggingFace Hub's key. It gives access to the public datasets, and to the [gated datasets](https://huggingface.co/docs/hub/datasets-gated) for which the user has accepted the conditions.",
        "scheme": "bearer",
        "bearerFormat": "A JWT, prefixed with `jwt:`."
      }
    },
    "examples": {
      "InexistentConfigError": {
        "summary": "The response is not found because the config does not exist.",
        "description": "try with config=inexistent-config.",
        "value": {
          "error": "Not found."
        }
      },
      "InexistentDatasetError": {
        "summary": "The dataset does not exist.",
        "description": "try with dataset=inexistent-dataset.",
        "value": {
          "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
        }
      },
      "InexistentSplitError": {
        "summary": "The response is not found because the split does not exist.",
        "description": "try with split=inexistent-split.",
        "value": {
          "error": "Not found."
        }
      },
      "AuthorizedPrivateDatasetError": {
        "summary": "The dataset is private, and you are not authorized.",
        "description": "try with dataset=severo/test_private.",
        "value": {
          "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
        }
      },
      "UnauthorizedPrivateDatasetError": {
        "summary": "The dataset is private, and you are authorized, but private datasets are not supported yet.",
        "description": "try with dataset=severo/test_private.",
        "value": {
          "error": "Not found."
        }
      },
      "UnauthorizedGatedDatasetError": {
        "summary": "The dataset is public but gated, and you are not authenticated or authorized.",
        "description": "try with dataset=severo/test_gated.",
        "value": {
          "error": "The dataset does not exist, or is not accessible without authentication (private or gated). Please check the spelling of the dataset name or retry with authentication."
        }
      },
      "MissingDatasetParameterError": {
        "summary": "The dataset parameter is missing.",
        "description": "try without setting ?dataset",
        "value": {
          "error": "Parameter 'dataset' is required"
        }
      },
      "EmptyDatasetParameterError": {
        "summary": "The dataset parameter is empty.",
        "description": "try with ?dataset=",
        "value": {
          "error": "Parameter 'dataset' is required"
        }
      },
      "MissingDatasetConfigSplitParameterError": {
        "summary": "One of the dataset, config or split parameters is missing.",
        "description": "try without setting ?dataset",
        "value": {
          "error": "Parameters 'split', 'config' and 'dataset' are required"
        }
      },
      "EmptyDatasetConfigSplitParameterError": {
        "summary": "One of the dataset, config or split parameters is empty.",
        "description": "try with ?dataset=",
        "value": {
          "error": "Parameters 'split', 'config' and 'dataset' are required"
        }
      },
      "ResponseNotReadyError": {
        "summary": "The response is not ready yet. You can retry later. The response header 'x-error-code' contains 'ResponseNotReady'.",
        "description": "Create a new dataset and try immediately, before the response could be generated.",
        "value": {
          "error": "The server is busier than usual and the response is not ready yet. Please retry later."
        }
      },
      "UnexpectedJsonError": {
        "summary": "The server encountered an unexpected error",
        "description": "This error indicates a bug in the code or a failure in the infrastructure. It can be reported to https://github.com/huggingface/datasets-server/issues.",
        "value": {
          "error": "Unexpected error."
        }
      },
      "UnexpectedTextError": {
        "summary": "The server encountered an unexpected error",
        "description": "This error indicates a bug in the code or a failure in the infrastructure. It can be reported to https://github.com/huggingface/datasets-server/issues.",
        "value": "Internal Server Error."
      }
    },
    "parameters": {
      "RequiredDataset": {
        "name": "dataset",
        "in": "query",
        "description": "The identifier of the dataset on the Hub.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "examples": {
          "glue": {
            "summary": "A canonical dataset",
            "value": "glue"
          },
          "Helsinki-NLP/tatoeba_mt": {
            "summary": "A namespaced dataset",
            "value": "Helsinki-NLP/tatoeba_mt"
          }
        }
      },
      "RequiredConfig": {
        "name": "config",
        "in": "query",
        "description": "The dataset configuration (or subset).",
        "required": true,
        "schema": {
          "type": "string"
        },
        "examples": {
          "cola": {
            "summary": "A subset of the glue dataset",
            "value": "cola"
          },
          "yangdong/ecqa": {
            "summary": "The default configuration given by the ðŸ¤— Datasets library",
            "value": "default"
          }
        }
      },
      "RequiredSplit": {
        "name": "split",
        "in": "query",
        "description": "The split name.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "examples": {
          "train": {
            "summary": "train split",
            "value": "train"
          },
          "test": {
            "summary": "test split",
            "value": "test"
          },
          "validation": {
            "summary": "validation split",
            "value": "validation"
          }
        }
      },
      "OptionalConfig": {
        "name": "config",
        "in": "query",
        "description": "The dataset configuration (or subset) on which to filter the response.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "cola": {
            "summary": "A subset of the glue dataset",
            "value": "cola"
          },
          "yangdong/ecqa": {
            "summary": "The default configuration given by the ðŸ¤— Datasets library",
            "value": "default"
          }
        }
      },
      "OptionalSplit": {
        "name": "split",
        "in": "query",
        "description": "The split name.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "train": {
            "summary": "train split",
            "value": "train"
          },
          "test": {
            "summary": "test split",
            "value": "test"
          },
          "validation": {
            "summary": "validation split",
            "value": "validation"
          }
        }
      }
    },
    "responses": {
      "Common401": {
        "description": "If the external authentication step on the Hugging Face Hub failed, and no authentication mechanism has been provided. Retry with authentication.",
        "headers": {
          "Cache-Control": {
            "$ref": "#/components/headers/Cache-Control"
          },
          "Access-Control-Allow-Origin": {
            "$ref": "#/components/headers/Access-Control-Allow-Origin"
          },
          "X-Error-Code": {
            "$ref": "#/components/headers/X-Error-Code-401"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomError"
            },
            "examples": {
              "inexistent dataset, and not authenticated": {
                "$ref": "#/components/examples/InexistentDatasetError"
              },
              "private dataset, and not authenticated or authorized": {
                "$ref": "#/components/examples/UnauthorizedPrivateDatasetError"
              }
            }
          }
        }
      },
      "Dataset404": {
        "description": "If the repository to download from cannot be found. This may be because it doesn't exist, or because it is set to `private` and you do not have access.",
        "headers": {
          "Cache-Control": {
            "$ref": "#/components/headers/Cache-Control"
          },
          "Access-Control-Allow-Origin": {
            "$ref": "#/components/headers/Access-Control-Allow-Origin"
          },
          "X-Error-Code": {
            "$ref": "#/components/headers/X-Error-Code-404"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomError"
            },
            "examples": {
              "inexistent dataset, while authenticated": {
                "$ref": "#/components/examples/InexistentDatasetError"
              },
              "private dataset, while authenticated and authorized": {
                "$ref": "#/components/examples/AuthorizedPrivateDatasetError"
              },
              "gated dataset, and not authenticated or authorized": {
                "$ref": "#/components/examples/UnauthorizedGatedDatasetError"
              }
            }
          }
        }
      },
      "Dataset422": {
        "description": "The `dataset` parameter has not been provided.",
        "headers": {
          "Cache-Control": {
            "$ref": "#/components/headers/Cache-Control"
          },
          "Access-Control-Allow-Origin": {
            "$ref": "#/components/headers/Access-Control-Allow-Origin"
          },
          "X-Error-Code": {
            "$ref": "#/components/headers/X-Error-Code-422"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomError"
            },
            "examples": {
              "missing dataset parameter": {
                "$ref": "#/components/examples/MissingDatasetParameterError"
              },
              "empty dataset parameter": {
                "$ref": "#/components/examples/EmptyDatasetParameterError"
              }
            }
          }
        }
      },
      "DatasetConfig404": {
        "description": "If the repository to download from cannot be found. This may be because it doesn't exist, or because it is set to `private` and you do not have access.",
        "headers": {
          "Cache-Control": {
            "$ref": "#/components/headers/Cache-Control"
          },
          "Access-Control-Allow-Origin": {
            "$ref": "#/components/headers/Access-Control-Allow-Origin"
          },
          "X-Error-Code": {
            "$ref": "#/components/headers/X-Error-Code-404"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomError"
            },
            "examples": {
              "inexistent dataset, while authenticated": {
                "$ref": "#/components/examples/InexistentDatasetError"
              },
              "private dataset, while authenticated and authorized": {
                "$ref": "#/components/examples/AuthorizedPrivateDatasetError"
              },
              "gated dataset, and not authenticated or authorized": {
                "$ref": "#/components/examples/UnauthorizedGatedDatasetError"
              },
              "inexistent config": {
                "$ref": "#/components/examples/InexistentConfigError"
              }
            }
          }
        }
      },
      "DatasetConfigSplit404": {
        "description": "If the repository to download from cannot be found, or if the config or split does not exist in the dataset. Note that this may be because the dataset doesn't exist, or because it is set to `private` and you do not have access.",
        "headers": {
          "Cache-Control": {
            "$ref": "#/components/headers/Cache-Control"
          },
          "Access-Control-Allow-Origin": {
            "$ref": "#/components/headers/Access-Control-Allow-Origin"
          },
          "X-Error-Code": {
            "$ref": "#/components/headers/X-Error-Code-404"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomError"
            },
            "examples": {
              "inexistent dataset, while authenticated": {
                "$ref": "#/components/examples/InexistentDatasetError"
              },
              "private dataset, while authenticated and authorized": {
                "$ref": "#/components/examples/AuthorizedPrivateDatasetError"
              },
              "gated dataset, and not authenticated or authorized": {
                "$ref": "#/components/examples/UnauthorizedGatedDatasetError"
              },
              "inexistent config": {
                "$ref": "#/components/examples/InexistentConfigError"
              },
              "inexistent split": {
                "$ref": "#/components/examples/InexistentSplitError"
              }
            }
          }
        }
      },
      "DatasetConfigSplit422": {
        "description": "Some of the `dataset`, `config`, or `split` parameters have not been provided or are invalid.",
        "headers": {
          "Cache-Control": {
            "$ref": "#/components/headers/Cache-Control"
          },
          "Access-Control-Allow-Origin": {
            "$ref": "#/components/headers/Access-Control-Allow-Origin"
          },
          "X-Error-Code": {
            "$ref": "#/components/headers/X-Error-Code-422"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomError"
            },
            "examples": {
              "missing required parameter": {
                "$ref": "#/components/examples/MissingDatasetConfigSplitParameterError"
              },
              "empty required parameter": {
                "$ref": "#/components/examples/EmptyDatasetConfigSplitParameterError"
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/splits": {
      "get": {
        "summary": "List of splits",
        "description": "The list of splits of a dataset.",
        "externalDocs": {
          "description": "See Splits (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/splits"
        },
        "operationId": "listSplits",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/OptionalConfig"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of splits.</br>Beware: the response is not paginated.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitsResponse"
                },
                "examples": {
                  "all splits in a dataset": {
                    "summary": "duorc: two configs, six splits",
                    "description": "Try with https://datasets-server.huggingface.co/splits?dataset=duorc.",
                    "value": {
                      "splits": [
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "train"
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "validation"
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "test"
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "train"
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "validation"
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "test"
                        }
                      ],
                      "pending": [],
                      "failed": []
                    }
                  },
                  "splits for a single config": {
                    "summary": "emotion has two configs. Setting config=unsplit only returns the splits for this config.",
                    "description": "Try with https://datasets-server.huggingface.co/splits?dataset=emotion&config=unsplit.",
                    "value": {
                      "splits": [
                        {
                          "dataset": "emotion",
                          "config": "unsplit",
                          "split": "train"
                        }
                      ]
                    }
                  },
                  "one of the config has an error": {
                    "summary": "one of the configs require manual download, and fails to give the split names",
                    "description": "Try with https://datasets-server.huggingface.co/splits?dataset=superb.",
                    "value": {
                      "splits": [
                        {
                          "dataset": "superb",
                          "config": "asr",
                          "split": "train"
                        },
                        {
                          "dataset": "superb",
                          "config": "asr",
                          "split": "validation"
                        },
                        {
                          "dataset": "superb",
                          "config": "asr",
                          "split": "test"
                        },
                        {
                          "dataset": "superb",
                          "config": "ic",
                          "split": "train"
                        },
                        {
                          "dataset": "superb",
                          "config": "ic",
                          "split": "validation"
                        },
                        {
                          "dataset": "superb",
                          "config": "ic",
                          "split": "test"
                        },
                        {
                          "dataset": "superb",
                          "config": "ks",
                          "split": "train"
                        },
                        {
                          "dataset": "superb",
                          "config": "ks",
                          "split": "validation"
                        },
                        {
                          "dataset": "superb",
                          "config": "ks",
                          "split": "test"
                        },
                        {
                          "dataset": "superb",
                          "config": "sd",
                          "split": "train"
                        },
                        { "dataset": "superb", "config": "sd", "split": "dev" },
                        {
                          "dataset": "superb",
                          "config": "sd",
                          "split": "test"
                        },
                        {
                          "dataset": "superb",
                          "config": "si",
                          "split": "train"
                        },
                        {
                          "dataset": "superb",
                          "config": "si",
                          "split": "validation"
                        },
                        { "dataset": "superb", "config": "si", "split": "test" }
                      ],
                      "pending": [],
                      "failed": [
                        {
                          "dataset": "superb",
                          "config": "er",
                          "error": {
                            "error": "dataset=superb requires manual download.",
                            "cause_exception": "ManualDownloadError",
                            "cause_message": "                    The dataset superb with config er requires manual data.\n                    Please follow the manual download instructions:\n\nPlease download the IEMOCAP dataset after submitting the request form here:\nhttps://sail.usc.edu/iemocap/iemocap_release.htm\nHaving downloaded the dataset you can extract it with `tar -xvzf IEMOCAP_full_release.tar.gz`\nwhich should create a folder called `IEMOCAP_full_release`\n\n                    Manual data can be loaded with:\n                     datasets.load_dataset(\"superb\", data_dir=\"<path/to/manual/data>\")",
                            "cause_traceback": [
                              "Traceback (most recent call last):\n",
                              "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 299, in raise_if_requires_manual_download\n    builder._check_manual_download(\n",
                              "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/builder.py\", line 932, in _check_manual_download\n    raise ManualDownloadError(\n",
                              "datasets.builder.ManualDownloadError:                     The dataset superb with config er requires manual data.\n                    Please follow the manual download instructions:\n\nPlease download the IEMOCAP dataset after submitting the request form here:\nhttps://sail.usc.edu/iemocap/iemocap_release.htm\nHaving downloaded the dataset you can extract it with `tar -xvzf IEMOCAP_full_release.tar.gz`\nwhich should create a folder called `IEMOCAP_full_release`\n\n                    Manual data can be loaded with:\n                     datasets.load_dataset(\"superb\", data_dir=\"<path/to/manual/data>\")\n"
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/DatasetConfig404"
          },
          "422": {
            "$ref": "#/components/responses/Dataset422"
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "error in the dataset itself": {
                    "summary": "The dataset is empty, or a file is missing, or some other error that prevents the response to be created.",
                    "description": "Try with https://datasets-server.huggingface.co/splits?dataset=severo/empty",
                    "value": {
                      "error": "The dataset is empty.",
                      "cause_exception": "EmptyDatasetError",
                      "cause_message": "The directory at hf://datasets/severo/empty@5db043c2aee5fe0f2118c134de45f7b2e3230fbc doesn't contain any data files",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/job_runners/dataset/config_names.py\", line 56, in compute_config_names_response\n    for config in sorted(get_dataset_config_names(path=dataset, use_auth_token=use_auth_token))\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/inspect.py\", line 351, in get_dataset_config_names\n    dataset_module = dataset_module_factory(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/load.py\", line 1486, in dataset_module_factory\n    raise e1 from None\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/load.py\", line 1469, in dataset_module_factory\n    return HubDatasetModuleFactoryWithoutScript(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/load.py\", line 1032, in get_module\n    else get_data_patterns(base_path, download_config=self.download_config)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/data_files.py\", line 459, in get_data_patterns\n    raise EmptyDatasetError(f\"The directory at {base_path} doesn't contain any data files\") from None\n",
                        "datasets.data_files.EmptyDatasetError: The directory at hf://datasets/severo/empty@5db043c2aee5fe0f2118c134de45f7b2e3230fbc doesn't contain any data files\n"
                      ]
                    }
                  },
                  "response not ready": {
                    "$ref": "#/components/examples/ResponseNotReadyError"
                  },
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "too many configs in the dataset": {
                    "summary": "The dataset has too many configs. The server does not support more than 3,000 configs.",
                    "description": "Try with https://datasets-server.huggingface.co/splits?dataset=facebook/flores",
                    "value": {
                      "error": "The maximum number of configs allowed is 3000, dataset has 41617 configs."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {}
        }
      }
    },
    "/first-rows": {
      "get": {
        "summary": "First rows of a split",
        "description": "The list of the 100 first rows of a dataset split.",
        "externalDocs": {
          "description": "See First rows (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/first-rows"
        },
        "operationId": "listFirstRows",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/RequiredConfig"
          },
          {
            "$ref": "#/components/parameters/RequiredSplit"
          }
        ],
        "responses": {
          "200": {
            "description": "The <a href='https://huggingface.co/docs/datasets/about_dataset_features'>features</a>, and the 100 first rows of the split.</br>Note: the response can be truncated (less rows, or truncated cell contents): see examples.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirstRowsResponse"
                },
                "examples": {
                  "A simple dataset (imdb) with text and label": {
                    "summary": "Text, and label column. Only 3 rows are shown for brevity.",
                    "description": "Try with https://datasets-server.huggingface.co/first-rows?dataset=imdb&config=plain_text&split=train.",
                    "value": {
                      "dataset": "imdb",
                      "config": "plain_text",
                      "split": "train",
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "text",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "label",
                          "type": {
                            "names": ["neg", "pos"],
                            "_type": "ClassLabel"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "text": "I rented I AM CURIOUS-YELLOW from my video store because of all the controversy that surrounded it when it was first released in 1967. I also heard that at first it was seized by U.S. customs if it ever tried to enter this country, therefore being a fan of films considered \"controversial\" I really had to see this for myself.<br /><br />The plot is centered around a young Swedish drama student named Lena who wants to learn everything she can about life. In particular she wants to focus her attentions to making some sort of documentary on what the average Swede thought about certain political issues such as the Vietnam War and race issues in the United States. In between asking politicians and ordinary denizens of Stockholm about their opinions on politics, she has sex with her drama teacher, classmates, and married men.<br /><br />What kills me about I AM CURIOUS-YELLOW is that 40 years ago, this was considered pornographic. Really, the sex and nudity scenes are few and far between, even then it's not shot like some cheaply made porno. While my countrymen mind find it shocking, in reality sex and nudity are a major staple in Swedish cinema. Even Ingmar Bergman, arguably their answer to good old boy John Ford, had sex scenes in his films.<br /><br />I do commend the filmmakers for the fact that any sex shown in the film is shown for artistic purposes rather than just to shock people and make money to be shown in pornographic theaters in America. I AM CURIOUS-YELLOW is a good film for anyone wanting to study the meat and potatoes (no pun intended) of Swedish cinema. But really, this film doesn't have much of a plot.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "text": "\"I Am Curious: Yellow\" is a risible and pretentious steaming pile. It doesn't matter what one's political views are because this film can hardly be taken seriously on any level. As for the claim that frontal male nudity is an automatic NC-17, that isn't true. I've seen R-rated films with male nudity. Granted, they only offer some fleeting views, but where are the R-rated films with gaping vulvas and flapping labia? Nowhere, because they don't exist. The same goes for those crappy cable shows: schlongs swinging in the breeze but not a clitoris in sight. And those pretentious indie movies like The Brown Bunny, in which we're treated to the site of Vincent Gallo's throbbing johnson, but not a trace of pink visible on Chloe Sevigny. Before crying (or implying) \"double-standard\" in matters of nudity, the mentally obtuse should take into account one unavoidably obvious anatomical difference between men and women: there are no genitals on display when actresses appears nude, and the same cannot be said for a man. In fact, you generally won't see female genitals in an American film in anything short of porn or explicit erotica. This alleged double-standard is less a double standard than an admittedly depressing ability to come to terms culturally with the insides of women's bodies.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "text": "If only to avoid making this type of film in the future. This film is interesting as an experiment but tells no cogent story.<br /><br />One might feel virtuous for sitting thru it because it touches on so many IMPORTANT issues but it does so without any discernable motive. The viewer comes away with no new perspectives (unless one comes up with one while one's mind wanders, as it will invariably do during this pointless film).<br /><br />One might better spend one's time staring out a window at a tree growing.<br /><br />",
                            "label": 0
                          },
                          "truncated_cells": []
                        }
                      ],
                      "truncated": false
                    }
                  },
                  "Truncated cells": {
                    "summary": "Truncated cells due to the response size (has a timestamp column).",
                    "description": "Try with https://datasets-server.huggingface.co/first-rows?dataset=ett&config=m2&split=test.",
                    "value": {
                      "dataset": "ett",
                      "config": "m2",
                      "split": "test",
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "start",
                          "type": {
                            "dtype": "timestamp[s]",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "target",
                          "type": {
                            "feature": {
                              "dtype": "float32",
                              "_type": "Value"
                            },
                            "_type": "Sequence"
                          }
                        },
                        {
                          "feature_idx": 2,
                          "name": "feat_static_cat",
                          "type": {
                            "feature": {
                              "dtype": "uint64",
                              "_type": "Value"
                            },
                            "_type": "Sequence"
                          }
                        },
                        {
                          "feature_idx": 3,
                          "name": "feat_dynamic_real",
                          "type": {
                            "feature": {
                              "feature": {
                                "dtype": "float32",
                                "_type": "Value"
                              },
                              "_type": "Sequence"
                            },
                            "_type": "Sequence"
                          }
                        },
                        {
                          "feature_idx": 4,
                          "name": "item_id",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 3,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 4,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 5,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 6,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 7,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 8,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        },
                        {
                          "row_idx": 9,
                          "row": {
                            "start": "2016-07-01T00:00:00",
                            "target": "[38.6619987487793,38.222999572753906,37.34400177001953,37.124000549316406,37.124000549316406,36.9039",
                            "feat_static_cat": [0],
                            "feat_dynamic_real": "[[41.130001068115234,39.62200164794922,38.86800003051758,35.518001556396484,37.52799987792969,37.611",
                            "item_id": "OT"
                          },
                          "truncated_cells": ["target", "feat_dynamic_real"]
                        }
                      ],
                      "truncated": true
                    }
                  },
                  "Image column": {
                    "summary": "A column with images. Only 3 rows are shown for brevity.",
                    "description": "Try with https://datasets-server.huggingface.co/first-rows?dataset=huggan/horse2zebra&config=default&split=train.",
                    "value": {
                      "dataset": "huggan/horse2zebra",
                      "config": "default",
                      "split": "train",
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "imageA",
                          "type": {
                            "_type": "Image"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "imageB",
                          "type": {
                            "_type": "Image"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "imageA": {
                              "src": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/default/train/0/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "src": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/default/train/0/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "imageA": {
                              "src": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/default/train/1/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "src": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/default/train/1/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "imageA": {
                              "src": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/default/train/2/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "src": "https://datasets-server.huggingface.co/assets/huggan/horse2zebra/--/default/train/2/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        }
                      ],
                      "truncated": false
                    }
                  },
                  "Audio column": {
                    "summary": "A column with audio files. Only 3 rows are shown for brevity.",
                    "description": "Try with https://datasets-server.huggingface.co/first-rows?dataset=asapp%2Fslue&config=voxceleb&split=train.",
                    "value": {
                      "dataset": "asapp/slue",
                      "config": "voxceleb",
                      "split": "train",
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "id",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 1,
                          "name": "audio",
                          "type": {
                            "sampling_rate": 16000,
                            "_type": "Audio"
                          }
                        },
                        {
                          "feature_idx": 2,
                          "name": "speaker_id",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 3,
                          "name": "normalized_text",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 4,
                          "name": "sentiment",
                          "type": {
                            "dtype": "string",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 5,
                          "name": "start_second",
                          "type": {
                            "dtype": "float64",
                            "_type": "Value"
                          }
                        },
                        {
                          "feature_idx": 6,
                          "name": "end_second",
                          "type": {
                            "dtype": "float64",
                            "_type": "Value"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 0,
                          "row": {
                            "id": "id10059_229vKIGbxrI_00001",
                            "audio": [
                              {
                                "src": "https://datasets-server.huggingface.co/assets/asapp/slue/--/voxceleb/train/0/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "speaker_id": "id10059",
                            "normalized_text": "and i i don't believe in god no religion says yet i was",
                            "sentiment": "Neutral",
                            "start_second": 0,
                            "end_second": 4.24
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 1,
                          "row": {
                            "id": "id10059_229vKIGbxrI_00002",
                            "audio": [
                              {
                                "src": "https://datasets-server.huggingface.co/assets/asapp/slue/--/voxceleb/train/1/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "speaker_id": "id10059",
                            "normalized_text": "the question because of my mother till i was fourteen when i thought about it when i emerged with",
                            "sentiment": "Neutral",
                            "start_second": 0,
                            "end_second": 5.8
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 2,
                          "row": {
                            "id": "id10059_229vKIGbxrI_00003",
                            "audio": [
                              {
                                "src": "https://datasets-server.huggingface.co/assets/asapp/slue/--/voxceleb/train/2/audio/audio.wav",
                                "type": "audio/wav"
                              }
                            ],
                            "speaker_id": "id10059",
                            "normalized_text": "from my own culture things changed i i think about it a lot i value our",
                            "sentiment": "Neutral",
                            "start_second": 0,
                            "end_second": 5.67
                          },
                          "truncated_cells": []
                        }
                      ],
                      "truncated": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/DatasetConfigSplit404"
          },
          "422": {
            "$ref": "#/components/responses/DatasetConfigSplit422"
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500-first-rows"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "error in the dataset itself": {
                    "summary": "An error while processing the dataset prevents the response to be created.",
                    "description": "Try with https://datasets-server.huggingface.co/first-rows?dataset=atomic&config=atomic&split=train",
                    "value": {
                      "error": "Cannot load the dataset split (in streaming mode) to extract the first rows.",
                      "cause_exception": "FileNotFoundError",
                      "cause_message": "https://homes.cs.washington.edu/~msap/atomic/data/atomic_data.tgz",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 417, in _info\n    await _file_info(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 837, in _file_info\n    r.raise_for_status()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/aiohttp/client_reqrep.py\", line 1005, in raise_for_status\n    raise ClientResponseError(\n",
                        "aiohttp.client_exceptions.ClientResponseError: 404, message='Not Found', url=URL('https://maartensap.com/atomic/data/atomic_data.tgz')\n",
                        "\nThe above exception was the direct cause of the following exception:\n\n",
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/utils.py\", line 363, in get_rows_or_raise\n    return get_rows(\n",
                        "  File \"/src/services/worker/src/worker/utils.py\", line 305, in decorator\n    return func(*args, **kwargs)\n",
                        "  File \"/src/services/worker/src/worker/utils.py\", line 341, in get_rows\n    rows_plus_one = list(itertools.islice(ds, rows_max_number + 1))\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/iterable_dataset.py\", line 981, in __iter__\n    for key, example in ex_iterable:\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/iterable_dataset.py\", line 116, in __iter__\n    yield from self.generate_examples_fn(**self.kwargs)\n",
                        "  File \"/tmp/modules-cache/datasets_modules/datasets/atomic/c0f0ec7d10713c41dfc87f0cf17f936b122d22e19216051217c99134d38f6d7b/atomic.py\", line 123, in _generate_examples\n    for path, f in files:\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/streaming_download_manager.py\", line 866, in __iter__\n    yield from self.generator(*self.args, **self.kwargs)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/streaming_download_manager.py\", line 917, in _iter_from_urlpath\n    with xopen(urlpath, \"rb\", use_auth_token=use_auth_token) as f:\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/datasets/download/streaming_download_manager.py\", line 498, in xopen\n    file_obj = fsspec.open(file, mode=mode, *args, **kwargs).open()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/core.py\", line 134, in open\n    return self.__enter__()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/core.py\", line 102, in __enter__\n    f = self.fs.open(self.path, mode=mode)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/spec.py\", line 1199, in open\n    f = self._open(\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 356, in _open\n    size = size or self.info(path, **kwargs)[\"size\"]\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/asyn.py\", line 115, in wrapper\n    return sync(self.loop, func, *args, **kwargs)\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/asyn.py\", line 100, in sync\n    raise return_result\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/asyn.py\", line 55, in _runner\n    result[0] = await coro\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/fsspec/implementations/http.py\", line 430, in _info\n    raise FileNotFoundError(url) from exc\n",
                        "FileNotFoundError: https://homes.cs.washington.edu/~msap/atomic/data/atomic_data.tgz\n"
                      ]
                    }
                  },
                  "response not ready": {
                    "$ref": "#/components/examples/ResponseNotReadyError"
                  },
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {}
              }
            }
          }
        }
      }
    },
    "/rows": {
      "get": {
        "summary": "A slice of rows of a split",
        "description": "The list of rows of a dataset split at a given slice location (offset). Up to 100 rows are returned, use the length parameter to get less.",
        "externalDocs": {
          "description": "See rows (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/rows"
        },
        "operationId": "listRows",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/RequiredConfig"
          },
          {
            "$ref": "#/components/parameters/RequiredSplit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the slice.",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            },
            "examples": {
              "0": {
                "summary": "from the beginning",
                "value": 0
              },
              "100": {
                "summary": "from the row at index 100",
                "value": 100
              }
            }
          },
          {
            "name": "length",
            "in": "query",
            "description": "The length of the slice",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0,
              "maximum": 100
            },
            "examples": {
              "100": {
                "summary": "a slice of 100 rows",
                "value": 100
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The <a href='https://huggingface.co/docs/datasets/about_dataset_features'>features</a>, and the list of rows of the requested slice. Bytes columns are not supported at the moment, and their content will be 'null'.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                },
                "examples": {
                  "A slice of a simple dataset (imdb)": {
                    "summary": "Get a slice of length 3 from row 234 (offset=234&length=3).",
                    "description": "Try with https://datasets-server.huggingface.co/rows?dataset=imdb&config=plain_text&split=train&offset=234&length=3.",
                    "value": {
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "text",
                          "type": { "dtype": "string", "_type": "Value" }
                        },
                        {
                          "feature_idx": 1,
                          "name": "label",
                          "type": {
                            "names": ["neg", "pos"],
                            "_type": "ClassLabel"
                          }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 234,
                          "row": {
                            "text": "Well, you know the rest! This has to be the worst movie I've seen in a long long time. I can only imagine that Stephanie Beaham had some bills to pay when taking on this role.<br /><br />The lead role is played by (to me) a complete unknown and I would imagine disappeared right back into obscurity right after this turkey.<br /><br />Bruce Lee led the martial arts charge in the early 70's and since then fight scenes have to be either martial arts based or at least brutal if using street fighting techniques. This movie uses fast cuts to show off the martial arts, however, even this can't disguise the fact that the lady doesn't know how to throw a punch. An average 8 year old boy would take her apart on this showing.<br /><br />Sorry, the only mystery on show here is how this didn't win the golden raspberry for its year.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 235,
                          "row": {
                            "text": "I'm in Iraq right now doing a job that gives plenty of time for watching movies. We also have access to plenty of pirated movies, this gem came along with 11 other movies, and this is easily the worst I've seen in a long time. I've seen a few other reviews that claim this movie doesn't take itself too seriously, but really, I think that's a cover up for the fact that its horrible. It's not tongue in cheek, the writers really thought they were improving on the movie Blade. This movie is just one notch above Vampire Assassin, which if you haven't seen, i recommend. At least that movie is so unbelievably bad that you'll laugh harder than you thought possible. This is right at that cusp of no redeeming qualities what so ever. from the bad acting, to clichÃ© visual (ie opening credits), to the adobe premier special effects. they couldn't even get blanks for the guns, which may have to do with where the movie was filmed, but if you're going to use effects, make them close to accurate. as for the cast, it seems like they just went to a tae bo class and picked up the first not to ugly chick that walked out. Once again, like Ron Hall in Vampire Assassin, don't let stunt folk act, they can't. Also, the comment about this being a \"return of old vampire movies\"...no, it's not. This is exactly what all new vampire movies are about. Buffy the Vampire Slayer, Blade, Underworld, they're all about some super star fighting the vampires. This is the newest vampire genre, with bad blood, fake screams, and cheesy over acting. obviously anyone who wrote a good review about this is somehow connected to the movie, or friends of the cast. But what do I care, I paid 33 cents for it. Anyway, to wrap this up, someone in their first semester of film school decided to make a movie, I give them credit because it's better than I could do. Of course I also know I can't make movies so I don't try. I do know how to watch movies though. I work 12 hour nights, 6 days a week, I've seen several thousand in the year I've been out here and this was so bad that half way through i was hoping for a mortar attack.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 236,
                          "row": {
                            "text": "\"Valentine\" is another horror movie to add to the stalk and slash movie list (think \"Halloween\", \"Friday the 13th\", \"Scream\", and \"I Know What You Did Last Summer\"). It certainly isn't as good as those movies that I have listed about, but it's better than most of the ripoffs that came out after the first \"Friday the 13th\" film. One of those films was the 1981 Canadian made \"My Bloody Valentine\", which I hated alot. \"Valentine\" is a better film than that one, but it's not saying much. The plot: a nerdy young boy is teased and pranked by a couple of his classmates at the beginning of the film. Then the film moves years later when those classmates are all grown up, then they're picked off one-by-one. The killer is presumed to be the young boy now all grown up looking for revenge. But is it him? Or could it be somebody else? \"Valentine\" has an attractive cast which includes Denise Richards, David Boreanaz, Marley Shelton, Jessica Capshaw, and Katherine Heigl. They do what they can with the material they've got, but a lackluster script doesn't really do them any justice. There are some scary moments throughout, however. <br /><br />** (out of four)",
                            "label": 0
                          },
                          "truncated_cells": []
                        }
                      ],
                      "num_rows_total": 25000,
                      "num_rows_per_page": 100
                    }
                  },
                  "A slice of an image dataset (huggan/horse2zebra)": {
                    "summary": "Get a slice of length 3 from row 234 (offset=234&length=3).",
                    "description": "Try with https://datasets-server.huggingface.co/rows?dataset=huggan/horse2zebra&config=default&split=train&offset=234&length=3.",
                    "value": {
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "imageA",
                          "type": { "_type": "Image" }
                        },
                        {
                          "feature_idx": 1,
                          "name": "imageB",
                          "type": { "_type": "Image" }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 234,
                          "row": {
                            "imageA": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/default/train/234/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/default/train/234/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 235,
                          "row": {
                            "imageA": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/default/train/235/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/default/train/235/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 236,
                          "row": {
                            "imageA": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/default/train/236/imageA/image.jpg",
                              "height": 256,
                              "width": 256
                            },
                            "imageB": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/huggan/horse2zebra/--/default/train/236/imageB/image.jpg",
                              "height": 256,
                              "width": 256
                            }
                          },
                          "truncated_cells": []
                        }
                      ],
                      "num_rows_total": 1334,
                      "num_rows_per_page": 100
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "description": "If the repository to download from cannot be found, or if the config or split does not exist in the dataset. Note that this may be because the dataset doesn't exist, or because it is set to `private` and you do not have access.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-404"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "inexistent dataset, while authenticated": {
                    "$ref": "#/components/examples/InexistentDatasetError"
                  },
                  "private dataset, while authenticated and authorized": {
                    "$ref": "#/components/examples/AuthorizedPrivateDatasetError"
                  },
                  "gated dataset, and not authenticated or authorized": {
                    "$ref": "#/components/examples/UnauthorizedGatedDatasetError"
                  },
                  "inexistent config": {
                    "$ref": "#/components/examples/InexistentConfigError"
                  },
                  "inexistent split": {
                    "$ref": "#/components/examples/InexistentSplitError"
                  },
                  "error in the dataset itself": {
                    "summary": "An error while processing the dataset prevents the response to be created.",
                    "description": "Try with https://datasets-server.huggingface.co/rows?dataset=atomic&config=atomic&split=train. It's a bug, it should be a 500 error, see https://github.com/huggingface/datasets-server/issues/1661.",
                    "value": { "error": "Not found." }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Some of the 'dataset', 'config', 'split', 'offset' or 'length' parameters have not been provided or are invalid.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-422"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "missing-dataset": {
                    "summary": "The dataset parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "missing-config": {
                    "summary": "The config parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "missing-split": {
                    "summary": "The split parameter is missing.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-dataset": {
                    "summary": "The dataset parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-config": {
                    "summary": "The config parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "empty-split": {
                    "summary": "The split parameter is empty.",
                    "value": {
                      "error": "Parameters 'split', 'config' and 'dataset' are required"
                    }
                  },
                  "negative-offset": {
                    "summary": "The offset must be positive.",
                    "value": {
                      "error": "Offset must be positive"
                    }
                  },
                  "negative-length": {
                    "summary": "The length must be positive.",
                    "value": {
                      "error": "Length must be positive"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server crashed, or the response couldn't be generated successfully due to an error in the dataset itself. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500-rows"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {}
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "summary": "Full-text search in the text columns of a split",
        "description": "Returns the rows matching the query, ordered by row index. Up to 100 rows are returned. The offset and length parameters allow to navigate the results.",
        "externalDocs": {
          "description": "See search (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/search"
        },
        "operationId": "searchRows",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/RequiredConfig"
          },
          {
            "$ref": "#/components/parameters/RequiredSplit"
          },
          {
            "name": "query",
            "in": "query",
            "description": "The search query.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "dog": {
                "summary": "search the rows that contain the text 'dog'",
                "value": "dog"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the returned rows.",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            },
            "examples": {
              "0": {
                "summary": "from the beginning",
                "value": 0
              },
              "100": {
                "summary": "ignore the first 100 results",
                "value": 100
              }
            }
          },
          {
            "name": "length",
            "in": "query",
            "description": "The maximum number of returned rows",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0,
              "maximum": 100
            },
            "examples": {
              "100": {
                "summary": "up to 100 rows in the response",
                "value": 100
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The <a href='https://huggingface.co/docs/datasets/about_dataset_features'>features</a>, and the list of rows that match the search query. The query will only be searched among the string columns. Bytes columns are not supported at the moment, and their content will be 'null'.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                },
                "examples": {
                  "Search on a text dataset (imdb)": {
                    "summary": "The first 3 rows that match the 'dog' search query (query=dog&length=3).",
                    "description": "Try with https://datasets-server.huggingface.co/search?dataset=imdb&config=plain_text&split=train&query=dog&length=3.",
                    "value": {
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "text",
                          "type": { "dtype": "string", "_type": "Value" }
                        },
                        {
                          "feature_idx": 1,
                          "name": "label",
                          "type": { "dtype": "int64", "_type": "Value" }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 27,
                          "row": {
                            "text": "Pedantic, overlong fabrication which attempts to chronicle the birth of the Federal Bureau of Investigations. Begins quite promisingly, with a still-relevant probe into an airplane explosion, however the melodrama involving James Stewart and wife Vera Miles just gets in the way (Miles had a habit of playing tepid wives under duress, and her frayed nerves arrive here right on schedule). Esteemed director Mervyn LeRoy helmed this adaptation of Don Whitehead's book, but despite the talent involved, the picture fails to make much of an impression. Best performance is turned in by Murray Hamilton as Stewart's partner, however most of the dialogue is ludicrous and the dogged pacing causes the movie to seem twice as long as it is. *1/2 from ****",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 51,
                          "row": {
                            "text": "The opening shot was the best thing about this movie, because it gave you hope that you would be seeing a passionate, well-crafted independent film. Damn that opening shot for filling me hope. As the \"film\" progressed in a slow, plodding manner, my thoughts were varied in relation to this \"film\": Was there too much butter in my popcorn? Did the actors have to PAY the director to be in this \"film\"? Did I get my ticket validated at the Box Office? Yes, dear reader. I saw this film in the Theatre! This would be the only exception I will make about seeing a film at home over a Movie Theatre, because at home you can TURN IT OFF. Were there any redeeming values? Peter Lemongelli as the standard college \"nerd\" had his moments, especially in a dog collar. Other than that this \"film\" went from trying to be a comedy, to a family drama to a spiritual uplifter. It succeeded on none of these fronts. Oh, and the girlfriend was realllllllllly bad. Her performance was the only comedy I found.",
                            "label": 0
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 106,
                          "row": {
                            "text": "I saw this movie at the AFI Dallas festival. Most of the audience, including my wife, enjoyed this comedy-drama, but I didn't. It stars Lucas Haas (Brick, Alpha Dog), Molly Parker (Kissed, The Five Senses, Hollywoodland) and Adam Scott (First Snow, Art School Confidential). The director is Matt Bissonnette, who's married to Molly Parker. All three actors do a fine job in this movie about 3 friends, the marriage of two of them and infidelity involving the third. It all takes place at a lake house and it looks wonderful. The film wants to treat its subject as a comedy first and then a drama, and I thought it needed to be the other way around.",
                            "label": 0
                          },
                          "truncated_cells": []
                        }
                      ],
                      "num_rows_total": 624,
                      "num_rows_per_page": 100
                    }
                  },
                  "Search on an image dataset": {
                    "summary": "The first 3 rows that match the 'bird' search query (query=bird&length=3). Images are included.",
                    "description": "Try with https://datasets-server.huggingface.co/search?dataset=lambdalabs/pokemon-blip-captions&config=default&split=train&query=bird&length=3.",
                    "value": {
                      "features": [
                        {
                          "feature_idx": 0,
                          "name": "image",
                          "type": { "_type": "Image" }
                        },
                        {
                          "feature_idx": 1,
                          "name": "text",
                          "type": { "dtype": "string", "_type": "Value" }
                        }
                      ],
                      "rows": [
                        {
                          "row_idx": 16,
                          "row": {
                            "image": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/lambdalabs/pokemon-blip-captions/--/default/train/16/image/image.jpg",
                              "height": 431,
                              "width": 431
                            },
                            "text": "a pink bird sitting on top of a white surface"
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 54,
                          "row": {
                            "image": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/lambdalabs/pokemon-blip-captions/--/default/train/54/image/image.jpg",
                              "height": 1280,
                              "width": 1280
                            },
                            "text": "a blue and white bird with its wings spread"
                          },
                          "truncated_cells": []
                        },
                        {
                          "row_idx": 56,
                          "row": {
                            "image": {
                              "src": "https://datasets-server.huggingface.co/cached-assets/lambdalabs/pokemon-blip-captions/--/default/train/56/image/image.jpg",
                              "height": 1280,
                              "width": 1280
                            },
                            "text": "a yellow bird flying through the air"
                          },
                          "truncated_cells": []
                        }
                      ],
                      "num_rows_total": 94,
                      "num_rows_per_page": 100
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/DatasetConfigSplit404"
          },
          "422": {
            "description": "Some of the 'dataset', 'config', 'split', 'query', 'offset' or 'length' parameters have not been provided or are invalid.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-422"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "missing-dataset": {
                    "summary": "The dataset parameter is missing.",
                    "value": {
                      "error": "Parameter 'dataset', 'config', 'split' and 'query' are required"
                    }
                  },
                  "missing-config": {
                    "summary": "The config parameter is missing.",
                    "value": {
                      "error": "Parameter 'dataset', 'config', 'split' and 'query' are required"
                    }
                  },
                  "missing-split": {
                    "summary": "The split parameter is missing.",
                    "value": {
                      "error": "Parameter 'dataset', 'config', 'split' and 'query' are required"
                    }
                  },
                  "missing-query": {
                    "summary": "The query parameter is missing.",
                    "value": {
                      "error": "Parameter 'dataset', 'config', 'split' and 'query' are required"
                    }
                  },
                  "empty-dataset": {
                    "summary": "The dataset parameter is empty.",
                    "value": {
                      "error": "Parameter 'dataset', 'config', 'split' and 'query' are required"
                    }
                  },
                  "empty-config": {
                    "summary": "The config parameter is empty.",
                    "value": {
                      "error": "Parameter 'dataset', 'config', 'split' and 'query' are required"
                    }
                  },
                  "empty-split": {
                    "summary": "The split parameter is empty.",
                    "value": {
                      "error": "Parameter 'dataset', 'config', 'split' and 'query' are required"
                    }
                  },
                  "empty-query": {
                    "summary": "The query parameter is empty.",
                    "value": {
                      "error": "Parameter 'dataset', 'config', 'split' and 'query' are required"
                    }
                  },
                  "negative-offset": {
                    "summary": "The offset must be positive.",
                    "value": {
                      "error": "Offset must be positive"
                    }
                  },
                  "negative-length": {
                    "summary": "The length must be positive.",
                    "value": {
                      "error": "Length must be positive"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500-search"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "error in the dataset itself": {
                    "summary": "An error while processing the dataset prevents the response to be created.",
                    "description": "Try with https://datasets-server.huggingface.co/search?dataset=atomic&config=atomic&split=train&query=dog",
                    "value": {
                      "error": "Couldn't get the size of external files in `_split_generators` because a request failed:\n404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\nPlease consider moving your data files in this dataset repository instead (e.g. inside a data/ folder).",
                      "cause_exception": "HTTPError",
                      "cause_message": "404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 506, in raise_if_too_big_from_external_data_files\n    for i, size in enumerate(pool.imap_unordered(get_size, ext_data_files)):\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 870, in next\n    raise value\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 125, in worker\n    result = (True, func(*args, **kwds))\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 402, in _request_size\n    response.raise_for_status()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/requests/models.py\", line 1021, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n",
                        "requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\n"
                      ]
                    }
                  },
                  "response not ready": {
                    "$ref": "#/components/examples/ResponseNotReadyError"
                  },
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "blocked dataset": {
                    "summary": "The dataset is blocked manually on the server.",
                    "description": "Try with https://datasets-server.huggingface.co/search?dataset=echarlaix/vqa-lxmert&config=vqa&split=validation&query=test",
                    "value": {
                      "error": "The parquet conversion has been disabled for this dataset for now. Please open an issue in https://github.com/huggingface/datasets-server if you want this dataset to be supported."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/parquet": {
      "get": {
        "summary": "List of parquet files",
        "description": "The dataset is converted to the parquet format. The endpoint gives the list of the parquet files. The same split can have multiple parquet files, called shards. They are sorted by their shard index.",
        "externalDocs": {
          "description": "See Parquet (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/parquet"
        },
        "operationId": "listParquetFiles",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/OptionalConfig"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of parquet files.</br>Beware: the response is not paginated.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParquetResponse"
                },
                "examples": {
                  "duorc": {
                    "summary": "duorc: six parquet files, one per split",
                    "description": "Try with https://datasets-server.huggingface.co/parquet?dataset=duorc",
                    "value": {
                      "parquet_files": [
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "test",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/test/0000.parquet",
                          "filename": "duorc-test.parquet",
                          "size": 6136591
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/train/0000.parquet",
                          "filename": "duorc-train.parquet",
                          "size": 26005668
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "validation",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/validation/0000.parquet",
                          "filename": "duorc-validation.parquet",
                          "size": 5566868
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "test",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/SelfRC/test/0000.parquet",
                          "filename": "duorc-test.parquet",
                          "size": 3035736
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/SelfRC/train/0000.parquet",
                          "filename": "duorc-train.parquet",
                          "size": 14851720
                        },
                        {
                          "dataset": "duorc",
                          "config": "SelfRC",
                          "split": "validation",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/SelfRC/validation/0000.parquet",
                          "filename": "duorc-validation.parquet",
                          "size": 3114390
                        }
                      ],
                      "pending": [],
                      "failed": [],
                      "partial": false
                    }
                  },
                  "duorc with ParaphraseRC config": {
                    "summary": "duorc: three parquet files for ParaphraseRC, one per split",
                    "description": "Try with https://datasets-server.huggingface.co/parquet?dataset=duorc&config=ParaphraseRC",
                    "value": {
                      "parquet_files": [
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "test",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/test/0000.parquet",
                          "filename": "duorc-test.parquet",
                          "size": 6136591
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/train/0000.parquet",
                          "filename": "duorc-train.parquet",
                          "size": 26005668
                        },
                        {
                          "dataset": "duorc",
                          "config": "ParaphraseRC",
                          "split": "validation",
                          "url": "https://huggingface.co/datasets/duorc/resolve/refs%2Fconvert%2Fparquet/ParaphraseRC/validation/0000.parquet",
                          "filename": "duorc-validation.parquet",
                          "size": 5566868
                        }
                      ],
                      "features": {
                        "plot_id": { "dtype": "string", "_type": "Value" },
                        "plot": { "dtype": "string", "_type": "Value" },
                        "title": { "dtype": "string", "_type": "Value" },
                        "question_id": { "dtype": "string", "_type": "Value" },
                        "question": { "dtype": "string", "_type": "Value" },
                        "answers": {
                          "feature": { "dtype": "string", "_type": "Value" },
                          "_type": "Sequence"
                        },
                        "no_answer": { "dtype": "bool", "_type": "Value" }
                      },
                      "partial": false
                    }
                  },
                  "sharded parquet files": {
                    "summary": "alexandrainst/da-wit: the parquet file for the train split is partitioned into 17 shards",
                    "description": "Try with https://datasets-server.huggingface.co/parquet?dataset=alexandrainst/da-wit",
                    "value": {
                      "parquet_files": [
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "test",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/test/0000.parquet",
                          "filename": "parquet-test.parquet",
                          "size": 48684227
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0000.parquet",
                          "filename": "parquet-train-00000-of-00017.parquet",
                          "size": 465549291
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0001.parquet",
                          "filename": "parquet-train-00001-of-00017.parquet",
                          "size": 465701535
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0002.parquet",
                          "filename": "parquet-train-00002-of-00017.parquet",
                          "size": 463857123
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0003.parquet",
                          "filename": "parquet-train-00003-of-00017.parquet",
                          "size": 456197486
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0004.parquet",
                          "filename": "parquet-train-00004-of-00017.parquet",
                          "size": 465412051
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0005.parquet",
                          "filename": "parquet-train-00005-of-00017.parquet",
                          "size": 469114305
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0006.parquet",
                          "filename": "parquet-train-00006-of-00017.parquet",
                          "size": 460338645
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0007.parquet",
                          "filename": "parquet-train-00007-of-00017.parquet",
                          "size": 468309376
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0008.parquet",
                          "filename": "parquet-train-00008-of-00017.parquet",
                          "size": 490063121
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0009.parquet",
                          "filename": "parquet-train-00009-of-00017.parquet",
                          "size": 460462764
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0010.parquet",
                          "filename": "parquet-train-00010-of-00017.parquet",
                          "size": 476525998
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0011.parquet",
                          "filename": "parquet-train-00011-of-00017.parquet",
                          "size": 470327354
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0012.parquet",
                          "filename": "parquet-train-00012-of-00017.parquet",
                          "size": 457138334
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0013.parquet",
                          "filename": "parquet-train-00013-of-00017.parquet",
                          "size": 464485292
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0014.parquet",
                          "filename": "parquet-train-00014-of-00017.parquet",
                          "size": 466549376
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0015.parquet",
                          "filename": "parquet-train-00015-of-00017.parquet",
                          "size": 460452174
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/train/0016.parquet",
                          "filename": "parquet-train-00016-of-00017.parquet",
                          "size": 480583533
                        },
                        {
                          "dataset": "alexandrainst/da-wit",
                          "config": "default",
                          "split": "val",
                          "url": "https://huggingface.co/datasets/alexandrainst/da-wit/resolve/refs%2Fconvert%2Fparquet/default/val/0000.parquet",
                          "filename": "parquet-val.parquet",
                          "size": 11434278
                        }
                      ],
                      "pending": [],
                      "failed": [],
                      "partial": false
                    }
                  },
                  "partial parquet export": {
                    "summary": "c4 (en): the parquet export is partial (first 5GB)",
                    "description": "Try with https://datasets-server.huggingface.co/parquet?dataset=c4&config=en",
                    "value": {
                      "parquet_files": [
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0000.parquet",
                          "filename": "0000.parquet",
                          "size": 309207547
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0001.parquet",
                          "filename": "0001.parquet",
                          "size": 308665905
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0002.parquet",
                          "filename": "0002.parquet",
                          "size": 309066442
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0003.parquet",
                          "filename": "0003.parquet",
                          "size": 309257276
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0004.parquet",
                          "filename": "0004.parquet",
                          "size": 309040649
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0005.parquet",
                          "filename": "0005.parquet",
                          "size": 308850445
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0006.parquet",
                          "filename": "0006.parquet",
                          "size": 308432549
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0007.parquet",
                          "filename": "0007.parquet",
                          "size": 308621018
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0008.parquet",
                          "filename": "0008.parquet",
                          "size": 309109536
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "train",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial-train/0009.parquet",
                          "filename": "0009.parquet",
                          "size": 300817682
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "validation",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial/validation/0000.parquet",
                          "filename": "0000.parquet",
                          "size": 308896113
                        },
                        {
                          "dataset": "c4",
                          "config": "en",
                          "split": "validation",
                          "url": "https://huggingface.co/datasets/c4/resolve/refs%2Fconvert%2Fparquet/en/partial/validation/0001.parquet",
                          "filename": "0001.parquet",
                          "size": 200085262
                        }
                      ],
                      "pending": [],
                      "failed": [],
                      "partial": true
                    }
                  },
                  "dataset where no parquet file could be created": {
                    "summary": "When the parquet files cannot be created for a configuration, it's listed in 'failed'.",
                    "description": "Try with https://datasets-server.huggingface.co/parquet?dataset=atomic",
                    "value": {
                      "parquet_files": [],
                      "pending": [],
                      "failed": [
                        {
                          "kind": "config-info",
                          "dataset": "atomic",
                          "config": "atomic",
                          "split": null
                        }
                      ],
                      "partial": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/DatasetConfig404"
          },
          "422": {
            "$ref": "#/components/responses/Dataset422"
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500-common"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "error in the dataset itself": {
                    "summary": "An error while processing the dataset prevents the response to be created.",
                    "description": "Try with https://datasets-server.huggingface.co/parquet?dataset=atomic&config=atomic",
                    "value": {
                      "error": "Couldn't get the size of external files in `_split_generators` because a request failed:\n404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\nPlease consider moving your data files in this dataset repository instead (e.g. inside a data/ folder).",
                      "cause_exception": "HTTPError",
                      "cause_message": "404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 506, in raise_if_too_big_from_external_data_files\n    for i, size in enumerate(pool.imap_unordered(get_size, ext_data_files)):\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 870, in next\n    raise value\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 125, in worker\n    result = (True, func(*args, **kwds))\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 402, in _request_size\n    response.raise_for_status()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/requests/models.py\", line 1021, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n",
                        "requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\n"
                      ]
                    }
                  },
                  "response not ready": {
                    "$ref": "#/components/examples/ResponseNotReadyError"
                  },
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "blocked dataset": {
                    "summary": "The dataset is blocked manually on the server.",
                    "description": "Try with https://datasets-server.huggingface.co/parquet?dataset=echarlaix/vqa-lxmert&config=vqa",
                    "value": {
                      "error": "The parquet conversion has been disabled for this dataset for now. Please open an issue in https://github.com/huggingface/datasets-server if you want this dataset to be supported."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/is-valid": {
      "get": {
        "summary": "Check if a dataset is valid",
        "description": "Returns the capabilities of the dataset: show a preview of the 100 first rows, show the viewer for all the rows, search the rows. Use the optional config and split parameters to filter the response.",
        "externalDocs": {
          "description": "See Valid datasets (Hub docs)",
          "url": "https://huggingface.co/docs/datasets-server/valid"
        },
        "operationId": "isValidDataset",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/OptionalConfig"
          },
          {
            "$ref": "#/components/parameters/OptionalSplit"
          }
        ],
        "responses": {
          "200": {
            "description": "The capabilities of the dataset.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsValidResponse"
                },
                "examples": {
                  "all the capabilities": {
                    "summary": "valid dataset",
                    "description": "Try with https://datasets-server.huggingface.co/is-valid?dataset=glue",
                    "value": {
                      "preview": true,
                      "viewer": true,
                      "search": true
                    }
                  },
                  "only preview": {
                    "summary": "dataset with only preview",
                    "description": "Try with https://datasets-server.huggingface.co/is-valid?dataset=ehartford/dolphin",
                    "value": {
                      "preview": true,
                      "viewer": false,
                      "search": false
                    }
                  },
                  "no capabilities": {
                    "summary": "dataset with no capabilities",
                    "description": "Try with https://datasets-server.huggingface.co/is-valid?dataset=atomic",
                    "value": {
                      "preview": false,
                      "viewer": false,
                      "search": false
                    }
                  },
                  "all the capabilities, for a config": {
                    "summary": "valid config",
                    "description": "Try with https://datasets-server.huggingface.co/is-valid?dataset=glue&config=ax",
                    "value": {
                      "preview": true,
                      "viewer": true,
                      "search": true
                    }
                  },
                  "all the capabilities, for a split": {
                    "summary": "valid split",
                    "description": "Try with https://datasets-server.huggingface.co/is-valid?dataset=glue&config=ax&split=test",
                    "value": {
                      "preview": true,
                      "viewer": true,
                      "search": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/Dataset404"
          },
          "422": {
            "$ref": "#/components/responses/Dataset422"
          },
          "500": {
            "description": "The server crashed.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500-is-valid"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/info": {
      "get": {
        "summary": "Get the metadata of a dataset.",
        "description": "Returns the metadata of the dataset: description, homepage, features, etc. Use the optional config parameter to filter the response.",
        "externalDocs": {
          "description": "The response is a dump of the DatasetInfo object from the datasets library",
          "url": "https://huggingface.co/docs/datasets/en/package_reference/main_classes#datasets.DatasetInfo"
        },
        "operationId": "getInfo",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/OptionalConfig"
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of the dataset.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                },
                "examples": {
                  "dataset metadata": {
                    "summary": "metadata of a dataset. It's an object, with one key per config",
                    "description": "Try with https://datasets-server.huggingface.co/info?dataset=mnist",
                    "value": {
                      "dataset_info": {
                        "mnist": {
                          "description": "The MNIST dataset consists of 70,000 28x28 black-and-white images in 10 classes (one for each digits), with 7,000\nimages per class. There are 60,000 training images and 10,000 test images.\n",
                          "citation": "@article{lecun2010mnist,\n  title={MNIST handwritten digit database},\n  author={LeCun, Yann and Cortes, Corinna and Burges, CJ},\n  journal={ATT Labs [Online]. Available: http://yann.lecun.com/exdb/mnist},\n  volume={2},\n  year={2010}\n}\n",
                          "homepage": "http://yann.lecun.com/exdb/mnist/",
                          "license": "",
                          "features": {
                            "image": { "_type": "Image" },
                            "label": {
                              "names": [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9"
                              ],
                              "_type": "ClassLabel"
                            }
                          },
                          "supervised_keys": {
                            "input": "image",
                            "output": "label"
                          },
                          "task_templates": [
                            {
                              "task": "image-classification",
                              "label_column": "label"
                            }
                          ],
                          "builder_name": "mnist",
                          "config_name": "mnist",
                          "version": {
                            "version_str": "1.0.0",
                            "major": 1,
                            "minor": 0,
                            "patch": 0
                          },
                          "splits": {
                            "train": {
                              "name": "train",
                              "num_bytes": 17471100,
                              "num_examples": 60000,
                              "dataset_name": "mnist"
                            },
                            "test": {
                              "name": "test",
                              "num_bytes": 2916482,
                              "num_examples": 10000,
                              "dataset_name": "mnist"
                            }
                          },
                          "download_checksums": {
                            "https://storage.googleapis.com/cvdf-datasets/mnist/train-images-idx3-ubyte.gz": {
                              "num_bytes": 9912422,
                              "checksum": null
                            },
                            "https://storage.googleapis.com/cvdf-datasets/mnist/train-labels-idx1-ubyte.gz": {
                              "num_bytes": 28881,
                              "checksum": null
                            },
                            "https://storage.googleapis.com/cvdf-datasets/mnist/t10k-images-idx3-ubyte.gz": {
                              "num_bytes": 1648877,
                              "checksum": null
                            },
                            "https://storage.googleapis.com/cvdf-datasets/mnist/t10k-labels-idx1-ubyte.gz": {
                              "num_bytes": 4542,
                              "checksum": null
                            }
                          },
                          "download_size": 11594722,
                          "dataset_size": 20387582,
                          "size_in_bytes": 31982304
                        }
                      },
                      "pending": [],
                      "failed": [],
                      "partial": false
                    }
                  },
                  "config metadata": {
                    "summary": "metadata for a dataset config",
                    "description": "Try with https://datasets-server.huggingface.co/info?dataset=glue&config=ax",
                    "value": {
                      "dataset_info": {
                        "description": "GLUE, the General Language Understanding Evaluation benchmark\n(https://gluebenchmark.com/) is a collection of resources for training,\nevaluating, and analyzing natural language understanding systems.\n\n",
                        "citation": "\n@inproceedings{wang2019glue,\n  title={{GLUE}: A Multi-Task Benchmark and Analysis Platform for Natural Language Understanding},\n  author={Wang, Alex and Singh, Amanpreet and Michael, Julian and Hill, Felix and Levy, Omer and Bowman, Samuel R.},\n  note={In the Proceedings of ICLR.},\n  year={2019}\n}\n",
                        "homepage": "https://gluebenchmark.com/diagnostics",
                        "license": "",
                        "features": {
                          "premise": { "dtype": "string", "_type": "Value" },
                          "hypothesis": { "dtype": "string", "_type": "Value" },
                          "label": {
                            "names": ["entailment", "neutral", "contradiction"],
                            "_type": "ClassLabel"
                          },
                          "idx": { "dtype": "int32", "_type": "Value" }
                        },
                        "builder_name": "glue",
                        "config_name": "ax",
                        "version": {
                          "version_str": "1.0.0",
                          "description": "",
                          "major": 1,
                          "minor": 0,
                          "patch": 0
                        },
                        "splits": {
                          "test": {
                            "name": "test",
                            "num_bytes": 237694,
                            "num_examples": 1104,
                            "dataset_name": "glue"
                          }
                        },
                        "download_checksums": {
                          "https://dl.fbaipublicfiles.com/glue/data/AX.tsv": {
                            "num_bytes": 222257,
                            "checksum": null
                          }
                        },
                        "download_size": 222257,
                        "dataset_size": 237694,
                        "size_in_bytes": 459951
                      },
                      "partial": false
                    }
                  },
                  "dataset metadata with failed configs": {
                    "summary": "metadata of a dataset which has failed configs. The failed configs are listed in 'failed'.",
                    "description": "Try with https://datasets-server.huggingface.co/info?dataset=atomic",
                    "value": {
                      "dataset_info": {},
                      "pending": [],
                      "failed": [
                        {
                          "kind": "config-info",
                          "dataset": "atomic",
                          "config": "atomic",
                          "split": null
                        }
                      ],
                      "partial": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/DatasetConfig404"
          },
          "422": {
            "$ref": "#/components/responses/Dataset422"
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500-common"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "error in the dataset itself": {
                    "summary": "An error while processing the dataset prevents the response to be created.",
                    "description": "Try with https://datasets-server.huggingface.co/info?dataset=atomic&config=atomic",
                    "value": {
                      "error": "Couldn't get the size of external files in `_split_generators` because a request failed:\n404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\nPlease consider moving your data files in this dataset repository instead (e.g. inside a data/ folder).",
                      "cause_exception": "HTTPError",
                      "cause_message": "404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 506, in raise_if_too_big_from_external_data_files\n    for i, size in enumerate(pool.imap_unordered(get_size, ext_data_files)):\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 870, in next\n    raise value\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 125, in worker\n    result = (True, func(*args, **kwds))\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 402, in _request_size\n    response.raise_for_status()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/requests/models.py\", line 1021, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n",
                        "requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\n"
                      ]
                    }
                  },
                  "response not ready": {
                    "$ref": "#/components/examples/ResponseNotReadyError"
                  },
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "blocked dataset": {
                    "summary": "The dataset is blocked manually on the server.",
                    "description": "Try with https://datasets-server.huggingface.co/info?dataset=echarlaix/vqa-lxmert&config=vqa",
                    "value": {
                      "error": "The parquet conversion has been disabled for this dataset for now. Please open an issue in https://github.com/huggingface/datasets-server if you want this dataset to be supported."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/size": {
      "get": {
        "summary": "Get the size of a dataset.",
        "description": "Returns the size (number of rows, storage) of the dataset. Use the optional config parameter to filter the response.",
        "externalDocs": {
          "description": "See size (Hub docs). The doc is still missing for the endpoint, see https://github.com/huggingface/datasets-server/issues/1664.",
          "url": "https://huggingface.co/docs/datasets-server/"
        },
        "operationId": "getSize",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/OptionalConfig"
          }
        ],
        "responses": {
          "200": {
            "description": "The size of the dataset.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SizeResponse"
                },
                "examples": {
                  "dataset size": {
                    "summary": "size of a dataset.",
                    "description": "Try with https://datasets-server.huggingface.co/size?dataset=mnist",
                    "value": {
                      "size": {
                        "dataset": {
                          "dataset": "mnist",
                          "num_bytes_original_files": 11594722,
                          "num_bytes_parquet_files": 18157506,
                          "num_bytes_memory": 20387582,
                          "num_rows": 70000
                        },
                        "configs": [
                          {
                            "dataset": "mnist",
                            "config": "mnist",
                            "num_bytes_original_files": 11594722,
                            "num_bytes_parquet_files": 18157506,
                            "num_bytes_memory": 20387582,
                            "num_rows": 70000,
                            "num_columns": 2
                          }
                        ],
                        "splits": [
                          {
                            "dataset": "mnist",
                            "config": "mnist",
                            "split": "train",
                            "num_bytes_parquet_files": 15561616,
                            "num_bytes_memory": 17471100,
                            "num_rows": 60000,
                            "num_columns": 2
                          },
                          {
                            "dataset": "mnist",
                            "config": "mnist",
                            "split": "test",
                            "num_bytes_parquet_files": 2595890,
                            "num_bytes_memory": 2916482,
                            "num_rows": 10000,
                            "num_columns": 2
                          }
                        ]
                      },
                      "pending": [],
                      "failed": [],
                      "partial": false
                    }
                  },
                  "config size": {
                    "summary": "size of a dataset config",
                    "description": "Try with https://datasets-server.huggingface.co/size?dataset=glue&config=ax",
                    "value": {
                      "size": {
                        "config": {
                          "dataset": "glue",
                          "config": "ax",
                          "num_bytes_original_files": 222257,
                          "num_bytes_parquet_files": 80767,
                          "num_bytes_memory": 237694,
                          "num_rows": 1104,
                          "num_columns": 4
                        },
                        "splits": [
                          {
                            "dataset": "glue",
                            "config": "ax",
                            "split": "test",
                            "num_bytes_parquet_files": 80767,
                            "num_bytes_memory": 237694,
                            "num_rows": 1104,
                            "num_columns": 4
                          }
                        ]
                      },
                      "partial": false
                    }
                  },
                  "dataset size with failed configs": {
                    "summary": "size of a dataset which has failed configs. The failed configs are listed in 'failed'.",
                    "description": "Try with https://datasets-server.huggingface.co/size?dataset=atomic",
                    "value": {
                      "size": {
                        "dataset": {
                          "dataset": "atomic",
                          "num_bytes_original_files": 0,
                          "num_bytes_parquet_files": 0,
                          "num_bytes_memory": 0,
                          "num_rows": 0
                        },
                        "configs": [],
                        "splits": []
                      },
                      "pending": [],
                      "failed": [
                        {
                          "kind": "config-size",
                          "dataset": "atomic",
                          "config": "atomic",
                          "split": null
                        }
                      ],
                      "partial": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/DatasetConfig404"
          },
          "422": {
            "$ref": "#/components/responses/Dataset422"
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500-common"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "error in the dataset itself": {
                    "summary": "An error while processing the dataset prevents the response to be created.",
                    "description": "Try with https://datasets-server.huggingface.co/size?dataset=atomic&config=atomic",
                    "value": {
                      "error": "Couldn't get the size of external files in `_split_generators` because a request failed:\n404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\nPlease consider moving your data files in this dataset repository instead (e.g. inside a data/ folder).",
                      "cause_exception": "HTTPError",
                      "cause_message": "404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 506, in raise_if_too_big_from_external_data_files\n    for i, size in enumerate(pool.imap_unordered(get_size, ext_data_files)):\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 870, in next\n    raise value\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 125, in worker\n    result = (True, func(*args, **kwds))\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 402, in _request_size\n    response.raise_for_status()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/requests/models.py\", line 1021, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n",
                        "requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\n"
                      ]
                    }
                  },
                  "response not ready": {
                    "$ref": "#/components/examples/ResponseNotReadyError"
                  },
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "blocked dataset": {
                    "summary": "The dataset is blocked manually on the server.",
                    "description": "Try with https://datasets-server.huggingface.co/size?dataset=echarlaix/vqa-lxmert&config=vqa",
                    "value": {
                      "error": "The parquet conversion has been disabled for this dataset for now. Please open an issue in https://github.com/huggingface/datasets-server if you want this dataset to be supported."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/opt-in-out-urls": {
      "get": {
        "summary": "Get the number of opted-in and opted-out image URLs in a dataset.",
        "description": "Based on the API of spawning.ai, returns the number of image URLs that have been opted-in and opted-out. Use the optional config and splits parameters to filter the response. Only a sample of the rows is scanned, the first 100K rows at the moment.",
        "externalDocs": {
          "description": "See spawning.io (Hub docs). The doc is still missing for the endpoint, see https://github.com/huggingface/datasets-server/issues/1664.",
          "url": "https://huggingface.co/docs/datasets-server/"
        },
        "operationId": "getOptInOutUrls",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/OptionalConfig"
          },
          {
            "$ref": "#/components/parameters/OptionalSplit"
          }
        ],
        "responses": {
          "200": {
            "description": "The number of opted-in and opted-out image URLS in the dataset.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptInOutUrlsCountResponse"
                },
                "examples": {
                  "number of URLS for a dataset": {
                    "summary": "number of URLs for a dataset.",
                    "description": "Try with https://datasets-server.huggingface.co/opt-in-out-urls?dataset=conceptual_captions",
                    "value": {
                      "urls_columns": ["image_url"],
                      "has_urls_columns": true,
                      "num_opt_in_urls": 0,
                      "num_opt_out_urls": 54760,
                      "num_scanned_rows": 215840,
                      "num_urls": 215840,
                      "full_scan": false
                    }
                  },
                  "number of URLS for a config": {
                    "summary": "number of URLs for a config.",
                    "description": "Try with https://datasets-server.huggingface.co/opt-in-out-urls?dataset=conceptual_captions&config=labeled",
                    "value": {
                      "urls_columns": ["image_url"],
                      "has_urls_columns": true,
                      "num_opt_in_urls": 0,
                      "num_opt_out_urls": 16579,
                      "num_scanned_rows": 100000,
                      "num_urls": 100000,
                      "full_scan": false
                    }
                  },
                  "number of URLS for a split": {
                    "summary": "number of URLs for a split.",
                    "description": "Try with https://datasets-server.huggingface.co/opt-in-out-urls?dataset=conceptual_captions&config=labeled&split=train",
                    "value": {
                      "has_urls_columns": true,
                      "num_opt_in_urls": 0,
                      "num_opt_out_urls": 16579,
                      "num_scanned_rows": 100000,
                      "num_urls": 100000,
                      "urls_columns": ["image_url"],
                      "full_scan": false
                    }
                  },
                  "dataset that has no image URLs columns": {
                    "summary": "no image URLs columns: values are zero.",
                    "description": "Try with https://datasets-server.huggingface.co/opt-in-out-urls?dataset=mnist",
                    "value": {
                      "urls_columns": [],
                      "has_urls_columns": false,
                      "num_opt_in_urls": 0,
                      "num_opt_out_urls": 0,
                      "num_scanned_rows": 0,
                      "num_urls": 0,
                      "full_scan": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/DatasetConfigSplit404"
          },
          "422": {
            "$ref": "#/components/responses/Dataset422"
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "response not ready": {
                    "$ref": "#/components/examples/ResponseNotReadyError"
                  },
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {}
              }
            }
          }
        }
      }
    },
    "/statistics": {
      "get": {
        "summary": "Descriptive statistics of a split's columns",
        "description": "Returns descriptive statistics, such as min, max, average, histogram, of the columns of a split.",
        "externalDocs": {
          "description": "See statistics (Hub docs). The doc is still missing for the endpoint, see https://github.com/huggingface/datasets-server/issues/1664.",
          "url": "https://huggingface.co/docs/datasets-server/"
        },
        "operationId": "getStatistics",
        "security": [
          {},
          {
            "CookieHuggingFace": []
          },
          {
            "AuthorizationHuggingFaceApiToken": []
          },
          {
            "AuthorizationHuggingFaceJWT": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredDataset"
          },
          {
            "$ref": "#/components/parameters/RequiredConfig"
          },
          {
            "$ref": "#/components/parameters/RequiredSplit"
          }
        ],
        "responses": {
          "200": {
            "description": "The descriptive statistics for the columns of the split.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                },
                "examples": {
                  "A split (mstz/wine) with numeric columns": {
                    "summary": "Statistics on numeric columns.",
                    "description": "Try with https://datasets-server.huggingface.co/statistics?dataset=mstz/wine&config=wine&split=train.",
                    "value": {
                      "num_examples": 6497,
                      "statistics": [
                        {
                          "column_name": "alcohol",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 8.0,
                            "max": 14.9,
                            "mean": 10.4918,
                            "median": 10.3,
                            "std": 1.19271,
                            "histogram": {
                              "hist": [
                                40, 1133, 1662, 1156, 1092, 628, 569, 175, 41, 1
                              ],
                              "bin_edges": [
                                8.0, 8.69, 9.38, 10.07, 10.76, 11.45, 12.14,
                                12.83, 13.52, 14.21, 14.9
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "chlorides",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 0.009,
                            "max": 0.611,
                            "mean": 0.05603,
                            "median": 0.047,
                            "std": 0.03503,
                            "histogram": {
                              "hist": [5061, 1279, 92, 34, 8, 9, 10, 2, 0, 2],
                              "bin_edges": [
                                0.009, 0.0692, 0.1294, 0.1896, 0.2498, 0.31,
                                0.3702, 0.4304, 0.4906, 0.5508, 0.611
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "citric_acid",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 0.0,
                            "max": 1.66,
                            "mean": 0.31863,
                            "median": 0.31,
                            "std": 0.14532,
                            "histogram": {
                              "hist": [
                                766, 3113, 2059, 420, 126, 5, 6, 1, 0, 1
                              ],
                              "bin_edges": [
                                0.0, 0.166, 0.332, 0.498, 0.664, 0.83, 0.996,
                                1.162, 1.328, 1.494, 1.66
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "density",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 0.98711,
                            "max": 1.03898,
                            "mean": 0.9947,
                            "median": 0.99489,
                            "std": 0.003,
                            "histogram": {
                              "hist": [1599, 3645, 1241, 9, 2, 0, 0, 0, 0, 1],
                              "bin_edges": [
                                0.98711, 0.9923, 0.99748, 1.00267, 1.00786,
                                1.01304, 1.01823, 1.02342, 1.02861, 1.03379,
                                1.03898
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "fixed_acidity",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 3.8,
                            "max": 15.9,
                            "mean": 7.21531,
                            "median": 7.0,
                            "std": 1.29643,
                            "histogram": {
                              "hist": [
                                63, 1151, 3248, 1339, 382, 177, 82, 41, 7, 7
                              ],
                              "bin_edges": [
                                3.8, 5.01, 6.22, 7.43, 8.64, 9.85, 11.06, 12.27,
                                13.48, 14.69, 15.9
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "free_sulfur_dioxide",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 1.0,
                            "max": 289.0,
                            "mean": 30.52532,
                            "median": 29.0,
                            "std": 17.7494,
                            "histogram": {
                              "hist": [3392, 2676, 401, 20, 6, 1, 0, 0, 0, 1],
                              "bin_edges": [
                                1.0, 29.8, 58.6, 87.4, 116.2, 145.0, 173.8,
                                202.6, 231.4, 260.2, 289.0
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "is_red",
                          "column_type": "class_label",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "n_unique": 2,
                            "frequencies": { "red": 1599, "white": 4898 }
                          }
                        },
                        {
                          "column_name": "pH",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 2.72,
                            "max": 4.01,
                            "mean": 3.2185,
                            "median": 3.21,
                            "std": 0.16079,
                            "histogram": {
                              "hist": [
                                16, 334, 1233, 2111, 1663, 802, 263, 59, 12, 4
                              ],
                              "bin_edges": [
                                2.72, 2.849, 2.978, 3.107, 3.236, 3.365, 3.494,
                                3.623, 3.752, 3.881, 4.01
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "quality",
                          "column_type": "int",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 3,
                            "max": 9,
                            "mean": 5.81838,
                            "median": 6.0,
                            "std": 0.87326,
                            "histogram": {
                              "hist": [30, 216, 2138, 2836, 1079, 193, 5],
                              "bin_edges": [3, 4, 5, 6, 7, 8, 9, 9]
                            }
                          }
                        },
                        {
                          "column_name": "residual_sugar",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 0.6,
                            "max": 65.8,
                            "mean": 5.44324,
                            "median": 3.0,
                            "std": 4.7578,
                            "histogram": {
                              "hist": [4551, 1396, 533, 14, 2, 0, 0, 0, 0, 1],
                              "bin_edges": [
                                0.6, 7.12, 13.64, 20.16, 26.68, 33.2, 39.72,
                                46.24, 52.76, 59.28, 65.8
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "sulphates",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 0.22,
                            "max": 2.0,
                            "mean": 0.53127,
                            "median": 0.51,
                            "std": 0.14881,
                            "histogram": {
                              "hist": [
                                1023, 3451, 1540, 382, 66, 21, 6, 4, 0, 4
                              ],
                              "bin_edges": [
                                0.22, 0.398, 0.576, 0.754, 0.932, 1.11, 1.288,
                                1.466, 1.644, 1.822, 2.0
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "total_sulfur_dioxide",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 6.0,
                            "max": 440.0,
                            "mean": 115.74457,
                            "median": 118.0,
                            "std": 56.52185,
                            "histogram": {
                              "hist": [
                                1088, 979, 2049, 1514, 721, 134, 8, 2, 1, 1
                              ],
                              "bin_edges": [
                                6.0, 49.4, 92.8, 136.2, 179.6, 223.0, 266.4,
                                309.8, 353.2, 396.6, 440.0
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "volatile_acidity",
                          "column_type": "float",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 0.08,
                            "max": 1.58,
                            "mean": 0.33967,
                            "median": 0.29,
                            "std": 0.16464,
                            "histogram": {
                              "hist": [
                                1580, 3002, 996, 606, 214, 70, 22, 4, 2, 1
                              ],
                              "bin_edges": [
                                0.08, 0.23, 0.38, 0.53, 0.68, 0.83, 0.98, 1.13,
                                1.28, 1.43, 1.58
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "A split (mnist) with a label column": {
                    "summary": "Statistics on a class label column. The image column is not processed.",
                    "description": "Try with https://datasets-server.huggingface.co/statistics?dataset=mnist&config=mnist&split=train.",
                    "value": {
                      "num_examples": 60000,
                      "statistics": [
                        {
                          "column_name": "label",
                          "column_type": "class_label",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "n_unique": 10,
                            "frequencies": {
                              "0": 5923,
                              "1": 6742,
                              "2": 5958,
                              "3": 6131,
                              "4": 5842,
                              "5": 5421,
                              "6": 5918,
                              "7": 6265,
                              "8": 5851,
                              "9": 5949
                            }
                          }
                        }
                      ]
                    }
                  },
                  "A split (glue) with a string (text) column": {
                    "summary": "Statistics on a string column. The column 'hypothesis' contains more than 30 different strings, so the statistics are a histogram of the string lengths.",
                    "description": "Try with https://datasets-server.huggingface.co/statistics?dataset=glue&config=ax&split=test.",
                    "value": {
                      "num_examples": 1104,
                      "statistics": [
                        {
                          "column_name": "hypothesis",
                          "column_type": "string_text",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 11,
                            "max": 296,
                            "mean": 97.46649,
                            "median": 88.0,
                            "std": 55.82714,
                            "histogram": {
                              "hist": [
                                171, 224, 235, 180, 102, 99, 53, 28, 10, 2
                              ],
                              "bin_edges": [
                                11, 40, 69, 98, 127, 156, 185, 214, 243, 272,
                                296
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "idx",
                          "column_type": "int",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 0,
                            "max": 1103,
                            "mean": 551.5,
                            "median": 551.5,
                            "std": 318.84165,
                            "histogram": {
                              "hist": [
                                111, 111, 111, 111, 111, 111, 111, 111, 111, 105
                              ],
                              "bin_edges": [
                                0, 111, 222, 333, 444, 555, 666, 777, 888, 999,
                                1103
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "label",
                          "column_type": "class_label",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "n_unique": 1,
                            "frequencies": {
                              "contradiction": 1104
                            }
                          }
                        },
                        {
                          "column_name": "premise",
                          "column_type": "string_text",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 11,
                            "max": 296,
                            "mean": 97.46649,
                            "median": 88.0,
                            "std": 55.82714,
                            "histogram": {
                              "hist": [
                                171, 224, 235, 180, 102, 99, 53, 28, 10, 2
                              ],
                              "bin_edges": [
                                11, 40, 69, 98, 127, 156, 185, 214, 243, 272,
                                296
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "A split (hellaswag) with a string (label) column": {
                    "summary": "Statistics on a string column. The column 'label' contains less than 30 different strings, so each string is considered as a label, and the statistics are a count per label.",
                    "description": "Try with https://datasets-server.huggingface.co/statistics?dataset=hellaswag&config=default&split=train.",
                    "value": {
                      "num_examples": 39905,
                      "statistics": [
                        {
                          "column_name": "activity_label",
                          "column_type": "string_text",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 3,
                            "max": 31,
                            "mean": 15.7912,
                            "median": 16.0,
                            "std": 6.50536,
                            "histogram": {
                              "hist": [
                                1564, 5973, 2467, 5844, 8075, 4732, 5382, 3965,
                                1825, 78
                              ],
                              "bin_edges": [
                                3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 31
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "ctx",
                          "column_type": "string_text",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 29,
                            "max": 524,
                            "mean": 217.86533,
                            "median": 231.0,
                            "std": 95.94445,
                            "histogram": {
                              "hist": [
                                3221, 6658, 4573, 5085, 8060, 7375, 3652, 1092,
                                169, 20
                              ],
                              "bin_edges": [
                                29, 79, 129, 179, 229, 279, 329, 379, 429, 479,
                                524
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "ctx_a",
                          "column_type": "string_text",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 1,
                            "max": 524,
                            "mean": 214.18228,
                            "median": 231.0,
                            "std": 99.93323,
                            "histogram": {
                              "hist": [
                                1987, 6198, 5422, 4068, 7695, 8395, 4549, 1356,
                                215, 20
                              ],
                              "bin_edges": [
                                1, 54, 107, 160, 213, 266, 319, 372, 425, 478,
                                524
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "ctx_b",
                          "column_type": "string_text",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 0,
                            "max": 140,
                            "mean": 3.31367,
                            "median": 0.0,
                            "std": 6.83284,
                            "histogram": {
                              "hist": [
                                37877, 1518, 347, 107, 36, 15, 4, 0, 0, 1
                              ],
                              "bin_edges": [
                                0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 140
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "ind",
                          "column_type": "int",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 2,
                            "max": 50674,
                            "mean": 25408.91299,
                            "median": 25533.0,
                            "std": 14670.02268,
                            "histogram": {
                              "hist": [
                                4034, 4023, 3891, 3887, 3975, 3845, 4131, 4062,
                                4089, 3968
                              ],
                              "bin_edges": [
                                2, 5070, 10138, 15206, 20274, 25342, 30410,
                                35478, 40546, 45614, 50674
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "label",
                          "column_type": "string_label",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "n_unique": 4,
                            "frequencies": {
                              "3": 10021,
                              "2": 9867,
                              "0": 9986,
                              "1": 10031
                            }
                          }
                        },
                        {
                          "column_name": "source_id",
                          "column_type": "string_text",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "min": 9,
                            "max": 25,
                            "mean": 17.35021,
                            "median": 13.0,
                            "std": 5.86238,
                            "histogram": {
                              "hist": [31, 2927, 22207, 0, 0, 0, 0, 0, 14740],
                              "bin_edges": [
                                9, 11, 13, 15, 17, 19, 21, 23, 25, 25
                              ]
                            }
                          }
                        },
                        {
                          "column_name": "split",
                          "column_type": "string_label",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "n_unique": 1,
                            "frequencies": {
                              "train": 39905
                            }
                          }
                        },
                        {
                          "column_name": "split_type",
                          "column_type": "string_label",
                          "column_statistics": {
                            "nan_count": 0,
                            "nan_proportion": 0.0,
                            "n_unique": 1,
                            "frequencies": {
                              "indomain": 39905
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Common401"
          },
          "404": {
            "$ref": "#/components/responses/DatasetConfigSplit404"
          },
          "422": {
            "$ref": "#/components/responses/DatasetConfigSplit422"
          },
          "500": {
            "description": "The server crashed, the response still hasn't been generated (the process is asynchronous), or the response couldn't be generated successfully due to an error in the dataset itself. The client can retry after a time, in particular in the case of the response still being processed. If the error does not vanish, it's possibly due to a bug in the API software or in the dataset, and should be reported.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-500-common"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "error in the dataset itself": {
                    "summary": "An error while processing the dataset prevents the response to be created.",
                    "description": "Try with https://datasets-server.huggingface.co/statistics?dataset=atomic&config=atomic&split=train",
                    "value": {
                      "error": "Couldn't get the size of external files in `_split_generators` because a request failed:\n404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\nPlease consider moving your data files in this dataset repository instead (e.g. inside a data/ folder).",
                      "cause_exception": "HTTPError",
                      "cause_message": "404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz",
                      "cause_traceback": [
                        "Traceback (most recent call last):\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 497, in _is_too_big_from_external_data_files\n    for i, size in enumerate(pool.imap_unordered(get_size, ext_data_files)):\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 870, in next\n    raise value\n",
                        "  File \"/usr/local/lib/python3.9/multiprocessing/pool.py\", line 125, in worker\n    result = (True, func(*args, **kwds))\n",
                        "  File \"/src/services/worker/src/worker/job_runners/config/parquet_and_info.py\", line 396, in _request_size\n    response.raise_for_status()\n",
                        "  File \"/src/services/worker/.venv/lib/python3.9/site-packages/requests/models.py\", line 1021, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n",
                        "requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://maartensap.com/atomic/data/atomic_data.tgz\n"
                      ]
                    }
                  },
                  "response not ready": {
                    "$ref": "#/components/examples/ResponseNotReadyError"
                  },
                  "unexpected error": {
                    "$ref": "#/components/examples/UnexpectedJsonError"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                },
                "examples": {
                  "internal server error": {
                    "$ref": "#/components/examples/UnexpectedTextError"
                  }
                }
              }
            }
          },
          "501": {
            "description": "The server does not implement the feature.",
            "headers": {
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Access-Control-Allow-Origin": {
                "$ref": "#/components/headers/Access-Control-Allow-Origin"
              },
              "X-Error-Code": {
                "$ref": "#/components/headers/X-Error-Code-501"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomError"
                },
                "examples": {
                  "blocked dataset": {
                    "summary": "The dataset is blocked manually on the server.",
                    "description": "Try with https://datasets-server.huggingface.co/statistics?dataset=echarlaix/vqa-lxmert&config=vqa&split=validation",
                    "value": {
                      "error": "The parquet conversion has been disabled for this dataset for now. Please open an issue in https://github.com/huggingface/datasets-server if you want this dataset to be supported."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
