services:
  reverse-proxy:
    image: docker.io/nginx:1.25.3
    # image: ${IMAGE_REVERSE_PROXY?IMAGE_REVERSE_PROXY env var must be provided}
    volumes:
      - ../chart/nginx-templates/:/etc/nginx/templates:ro
      - storage:${STORAGE_DIRECTORY-/storage}:ro
    ports:
      - "${PORT_REVERSE_PROXY-8000}:80"
    environment:
      ASSETS_DIRECTORY: ${ASSETS_STORAGE_DIRECTORY-/storage/assets}
      CACHED_ASSETS_DIRECTORY: ${CACHED_ASSETS_STORAGE_DIRECTORY-/storage/cached-assets}
      OPENAPI_FILE: ${OPENAPI_FILE-docs/source/openapi.json}
      HOST: localhost
      PORT: 80
      URL_ADMIN: http://host.docker.internal:${ADMIN_UVICORN_PORT-8081}
      URL_API: http://host.docker.internal:${API_UVICORN_PORT-8080}
      URL_ROWS: http://host.docker.internal:${ROWS_UVICORN_PORT-8082}
      URL_SEARCH: http://host.docker.internal:${SEARCH_UVICORN_PORT-8083}
      URL_SSE_API: http://host.docker.internal:${SSE_API_UVICORN_PORT-8085}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      admin:
        condition: service_started
      api:
        condition: service_started
      rows:
        condition: service_started
      search:
        condition: service_started
  admin:
    build:
      context: ..
      dockerfile: services/admin/dev.Dockerfile
    volumes:
      - storage:${STORAGE_DIRECTORY-/storage}:rw
      - duckdb-index:${DUCKDB_INDEX_CACHE_DIRECTORY-/duckdb-index}:ro
      - parquet-metadata:${PARQUET_METADATA_STORAGE_DIRECTORY-/parquet_metadata}:ro
      - descriptive-statistics:${DESCRIPTIVE_STATISTICS_CACHE_DIRECTORY-/stats-cache}:ro
    extends:
      file: docker-compose-dev-base.yml
      service: admin
    environment:
      # service
      ADMIN_HF_ORGANIZATION: ${ADMIN_HF_ORGANIZATION-__DUMMY_DATASETS_SERVER_ADMINS_ORG__}
      ADMIN_CACHE_REPORTS_NUM_RESULTS: ${ADMIN_CACHE_REPORTS_NUM_RESULTS-100}
      ADMIN_CACHE_REPORTS_WITH_CONTENT_NUM_RESULTS: ${ADMIN_CACHE_REPORTS_WITH_CONTENT_NUM_RESULTS-100}
      ADMIN_HF_TIMEOUT_SECONDS: ${ADMIN_HF_TIMEOUT_SECONDS-10.0}
      ADMIN_HF_WHOAMI_PATH: ${ADMIN_HF_WHOAMI_PATH-/api/whoami-v2}
      ADMIN_MAX_AGE: ${ADMIN_MAX_AGE-10}
      # prometheus
      PROMETHEUS_MULTIPROC_DIR: ${PROMETHEUS_MULTIPROC_DIR-}
      # uvicorn
      ADMIN_UVICORN_HOSTNAME: 0.0.0.0 # required for docker compose
      ADMIN_UVICORN_NUM_WORKERS: ${ADMIN_UVICORN_NUM_WORKERS-2}
      ADMIN_UVICORN_PORT: ${ADMIN_UVICORN_PORT-8081}
      # storage
      ASSETS_STORAGE_ROOT: ${ASSETS_STORAGE_ROOT-/storage}
      ASSETS_FOLDER_NAME: ${ASSETS_FOLDER_NAME-assets}
      ASSETS_STORAGE_PROTOCOL: ${ASSETS_STORAGE_PROTOCOL-file}
      CACHED_ASSETS_STORAGE_ROOT: ${CACHED_ASSETS_STORAGE_ROOT-/storage}
      CACHED_ASSETS_FOLDER_NAME: ${CACHED_ASSETS_FOLDER_NAME-cached-assets}
      CACHED_ASSETS_STORAGE_PROTOCOL: ${CACHED_ASSETS_STORAGE_PROTOCOL-file}
      DESCRIPTIVE_STATISTICS_CACHE_DIRECTORY: ${DESCRIPTIVE_STATISTICS_CACHE_DIRECTORY-/stats-cache}
      DUCKDB_INDEX_CACHE_DIRECTORY: ${DUCKDB_INDEX_CACHE_DIRECTORY-/duckdb-index}
      PARQUET_METADATA_STORAGE_DIRECTORY: ${PARQUET_METADATA_STORAGE_DIRECTORY-/parquet_metadata}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: always
    network_mode: ${DEV_NETWORK_MODE}
    ports:
      - ${ADMIN_UVICORN_PORT-8081}:${ADMIN_UVICORN_PORT-8081}
  api:
    build:
      context: ..
      dockerfile: services/api/dev.Dockerfile
    extends:
      file: docker-compose-dev-base.yml
      service: api
    environment:
      # prometheus
      PROMETHEUS_MULTIPROC_DIR: ${PROMETHEUS_MULTIPROC_DIR-}
      # uvicorn
      API_UVICORN_HOSTNAME: 0.0.0.0 # required for docker compose
      API_UVICORN_NUM_WORKERS: ${API_UVICORN_NUM_WORKERS-2}
      API_UVICORN_PORT: ${API_UVICORN_PORT-8080}
    network_mode: ${DEV_NETWORK_MODE}
    ports:
      - ${API_UVICORN_PORT-8080}:${API_UVICORN_PORT-8080}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
  rows:
    build:
      context: ..
      dockerfile: services/rows/dev.Dockerfile
    extends:
      file: docker-compose-dev-base.yml
      service: rows
    volumes:
      - storage:${STORAGE_DIRECTORY-/storage}
      - parquet-metadata:${PARQUET_METADATA_STORAGE_DIRECTORY-/parquet_metadata}
    environment:
      CACHED_ASSETS_BASE_URL: "http://localhost:${PORT_REVERSE_PROXY-8000}/cached-assets" # hard-coded to work with the reverse-proxy
      # storage
      CACHED_ASSETS_STORAGE_ROOT: ${CACHED_ASSETS_STORAGE_ROOT-/storage}
      CACHED_ASSETS_FOLDER_NAME: ${CACHED_ASSETS_FOLDER_NAME-cached-assets}
      CACHED_ASSETS_STORAGE_PROTOCOL: ${CACHED_ASSETS_STORAGE_PROTOCOL-file}
      PARQUET_METADATA_STORAGE_DIRECTORY: ${PARQUET_METADATA_STORAGE_DIRECTORY-/parquet_metadata}
      ROWS_INDEX_MAX_ARROW_DATA_IN_MEMORY: ${ROWS_INDEX_MAX_ARROW_DATA_IN_MEMORY-300_000_000}
      # prometheus
      PROMETHEUS_MULTIPROC_DIR: ${PROMETHEUS_MULTIPROC_DIR-}
      # uvicorn
      API_UVICORN_HOSTNAME: 0.0.0.0 # required for docker compose
      API_UVICORN_NUM_WORKERS: ${ROWS_UVICORN_NUM_WORKERS-2}
      API_UVICORN_PORT: ${ROWS_UVICORN_PORT-8082}
    network_mode: ${DEV_NETWORK_MODE}
    ports:
      # for debug
      - ${ROWS_UVICORN_PORT-8082}:${ROWS_UVICORN_PORT-8082}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
  search:
    build:
      context: ..
      dockerfile: services/search/dev.Dockerfile
    extends:
      file: docker-compose-dev-base.yml
      service: search
    volumes:
      - storage:${STORAGE_DIRECTORY-/storage}
      - duckdb-index:${DUCKDB_INDEX_CACHE_DIRECTORY-/duckdb-index}
    environment:
      CACHED_ASSETS_BASE_URL: "http://localhost:${PORT_REVERSE_PROXY-8000}/cached-assets" # hard-coded to work with the reverse-proxy
      # storage
      CACHED_ASSETS_STORAGE_ROOT: ${CACHED_ASSETS_STORAGE_ROOT-/storage}
      CACHED_ASSETS_FOLDER_NAME: ${CACHED_ASSETS_FOLDER_NAME-cached-assets}
      CACHED_ASSETS_STORAGE_PROTOCOL: ${CACHED_ASSETS_STORAGE_PROTOCOL-file}
      DUCKDB_INDEX_CACHE_DIRECTORY: ${DUCKDB_INDEX_CACHE_DIRECTORY-/duckdb-index}
      # prometheus
      PROMETHEUS_MULTIPROC_DIR: ${PROMETHEUS_MULTIPROC_DIR-}
      # uvicorn
      API_UVICORN_HOSTNAME: 0.0.0.0 # required for docker compose
      API_UVICORN_NUM_WORKERS: ${SEARCH_UVICORN_NUM_WORKERS-2}
      API_UVICORN_PORT: ${SEARCH_UVICORN_PORT-8083}
    network_mode: ${DEV_NETWORK_MODE}
    ports:
      # for debug
      - ${SEARCH_UVICORN_PORT-8083}:${SEARCH_UVICORN_PORT-8083}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
  sse-api:
    build:
      context: ..
      dockerfile: services/sse-api/dev.Dockerfile
    extends:
      file: docker-compose-dev-base.yml
      service: api
    environment:
      # prometheus
      PROMETHEUS_MULTIPROC_DIR: ${PROMETHEUS_MULTIPROC_DIR-}
      # uvicorn
      API_UVICORN_HOSTNAME: 0.0.0.0 # required for docker compose
      API_UVICORN_NUM_WORKERS: ${SSE_API_UVICORN_NUM_WORKERS-2}
      API_UVICORN_PORT: ${SSE_API_UVICORN_PORT-8085}
    network_mode: ${DEV_NETWORK_MODE}
    ports:
      # for debug
      - ${SSE_API_UVICORN_PORT-8085}:${SSE_API_UVICORN_PORT-8085}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
  worker:
    build:
      context: ..
      dockerfile: services/worker/dev.Dockerfile
    deploy:
      replicas: ${DEV_WORKER_REPLICAS-4}
    volumes:
      - storage:${STORAGE_DIRECTORY-/storage}:rw
      - parquet-metadata:${PARQUET_METADATA_STORAGE_DIRECTORY-/parquet_metadata}:rw
      - duckdb-index:${DUCKDB_INDEX_CACHE_DIRECTORY-/duckdb-index}:rw
      - descriptive-statistics:${DESCRIPTIVE_STATISTICS_CACHE_DIRECTORY-/stats-cache}:rw
    extends:
      file: docker-compose-dev-base.yml
      service: datasets-worker
    environment:
      ASSETS_BASE_URL: "http://localhost:${PORT_REVERSE_PROXY-8000}/assets" # hard-coded to work with the reverse-proxy
      ASSETS_STORAGE_ROOT: ${ASSETS_STORAGE_ROOT-/storage}
      ASSETS_FOLDER_NAME: ${ASSETS_FOLDER_NAME-assets}
      ASSETS_STORAGE_PROTOCOL: ${ASSETS_STORAGE_PROTOCOL-file}
      CONFIG_NAMES_MAX_NUMBER: ${CONFIG_NAMES_MAX_NUMBER-3_000}
      DESCRIPTIVE_STATISTICS_CACHE_DIRECTORY: ${DESCRIPTIVE_STATISTICS_CACHE_DIRECTORY-/stats-cache}
      DESCRIPTIVE_STATISTICS_HISTOGRAM_NUM_BINS: ${DESCRIPTIVE_STATISTICS_HISTOGRAM_NUM_BINS-10}
      DESCRIPTIVE_STATISTICS_MAX_PARQUET_SIZE_BYTES: ${DESCRIPTIVE_STATISTICS_MAX_PARQUET_SIZE_BYTES-100_000_000}
      DUCKDB_INDEX_CACHE_DIRECTORY: ${DUCKDB_INDEX_CACHE_DIRECTORY-/duckdb-index}
      DUCKDB_INDEX_COMMIT_MESSAGE: ${DUCKDB_INDEX_COMMIT_MESSAGE-Update duckdb index file}
      DUCKDB_INDEX_COMMITTER_HF_TOKEN: ${DUCKDB_INDEX_COMMITTER_HF_TOKEN-}
      DUCKDB_INDEX_TARGET_REVISION: ${DUCKDB_INDEX_TARGET_REVISION-refs/convert/parquet}
      DUCKDB_INDEX_URL_TEMPLATE: ${DUCKDB_INDEX_URL_TEMPLATE-/datasets/%s/resolve/%s/%s}
      DUCKDB_INDEX_MAX_PARQUET_SIZE_BYTES: ${DUCKDB_INDEX_MAX_PARQUET_SIZE_BYTES-100_000_000}
      FIRST_ROWS_MAX_BYTES: ${FIRST_ROWS_MAX_BYTES-1_000_000}
      FIRST_ROWS_MAX_NUMBER: ${FIRST_ROWS_MAX_NUMBER-100}
      FIRST_ROWS_MIN_CELL_BYTES: ${FIRST_ROWS_MIN_CELL_BYTES-100}
      FIRST_ROWS_MIN_NUMBER: ${FIRST_ROWS_MIN_NUMBER-10}
      FIRST_ROWS_COLUMNS_MAX_NUMBER: ${FIRST_ROWS_COLUMNS_MAX_NUMBER-1_000}
      OPT_IN_OUT_URLS_SCAN_COLUMNS_MAX_NUMBER: ${OPT_IN_OUT_URLS_SCAN_COLUMNS_MAX_NUMBER-10}
      OPT_IN_OUT_URLS_SCAN_MAX_CONCURRENT_REQUESTS_NUMBER: ${OPT_IN_OUT_URLS_SCAN_MAX_CONCURRENT_REQUESTS_NUMBER-100}
      OPT_IN_OUT_URLS_SCAN_MAX_REQUESTS_PER_SECOND: ${OPT_IN_OUT_URLS_SCAN_MAX_REQUESTS_PER_SECOND-50}
      OPT_IN_OUT_URLS_SCAN_ROWS_MAX_NUMBER: ${OPT_IN_OUT_URLS_SCAN_ROWS_MAX_NUMBER-100_000}
      OPT_IN_OUT_URLS_SCAN_SPAWNING_TOKEN: ${OPT_IN_OUT_URLS_SCAN_SPAWNING_TOKEN-}
      OPT_IN_OUT_URLS_SCAN_URLS_NUMBER_PER_BATCH: ${OPT_IN_OUT_URLS_SCAN_URLS_NUMBER_PER_BATCH-1000}
      OPT_IN_OUT_URLS_SCAN_SPAWNING_URL: ${OPT_IN_OUT_URLS_SCAN_SPAWNING_URL-https://opts-api.spawningaiapi.com/api/v2/query/urls}
      PARQUET_AND_INFO_COMMIT_MESSAGE: ${PARQUET_AND_INFO_COMMIT_MESSAGE-Update parquet files}
      PARQUET_AND_INFO_COMMITTER_HF_TOKEN: ${PARQUET_AND_INFO_COMMITTER_HF_TOKEN-hf_app_datasets-server-parquet-converter_token}
      PARQUET_AND_INFO_MAX_DATASET_SIZE: ${PARQUET_AND_INFO_MAX_DATASET_SIZE-200_000_000}
      PARQUET_AND_INFO_MAX_EXTERNAL_DATA_FILES: ${PARQUET_AND_INFO_MAX_EXTERNAL_DATA_FILES-10_000}
      PARQUET_AND_INFO_MAX_ROW_GROUP_BYTE_SIZE_FOR_COPY: ${PARQUET_AND_INFO_MAX_ROW_GROUP_BYTE_SIZE_FOR_COPY-100_000_000}
      PARQUET_AND_INFO_SOURCE_REVISION: ${PARQUET_AND_INFO_SOURCE_REVISION-main}
      PARQUET_AND_INFO_TARGET_REVISION: ${PARQUET_AND_INFO_TARGET_REVISION-refs/convert/parquet}
      PARQUET_AND_INFO_URL_TEMPLATE: ${PARQUET_AND_INFO_URL_TEMPLATE-/datasets/%s/resolve/%s/%s}
      PARQUET_METADATA_STORAGE_DIRECTORY: ${PARQUET_METADATA_STORAGE_DIRECTORY-/parquet_metadata}
      ROWS_INDEX_MAX_ARROW_DATA_IN_MEMORY: ${ROWS_INDEX_MAX_ARROW_DATA_IN_MEMORY-300_000_000}
      WORKER_STORAGE_PATHS: ${ASSETS_STORAGE_DIRECTORY-/assets}
      # ^ note: the datasets cache is automatically added, so no need to add it here
    network_mode: ${DEV_NETWORK_MODE}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: always
  mongodb:
    image: "mongo:6.0.9"
    ports:
      - ${MONGO_PORT:-27017}:${MONGO_PORT:-27017}
    command: mongod --port ${MONGO_PORT:-27017} --replSet ${MONGO_REPLICASET:-rs0} --bind_ip_all
    volumes:
      - mongo:/data/db:rw
    healthcheck:
      test: test $$(mongosh --port ${MONGO_PORT:-27017} --quiet --eval "try{rs.initiate({_id:'${MONGO_REPLICASET:-rs0}',version:1,members:[{_id:0,host:'mongodb:${MONGO_PORT:-27017}'}]})} catch(e) {rs.status().ok}") -eq 1
      interval: 2s
      timeout: 20s
      retries: 10
      start_period: 20s
      start_interval: 2s
volumes:
  storage:
  mongo:
  parquet-metadata:
  duckdb-index:
  descriptive-statistics:
